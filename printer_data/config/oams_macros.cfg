[gcode_macro CUT_FILAMENT1]
variable_clippy_servo_name: 'clippy'
variable_clippy_minimum_angle: 120 # Idle position
variable_clippy_cut_angle: 0 # Cutting position
gcode:
    {% set pre_cut_x = printer["gcode_macro _oams_macro_variables"].pre_cut_x %}
    {% set pre_cut_y = printer["gcode_macro _oams_macro_variables"].pre_cut_y %}
    {% set pre_cut_speed = printer["gcode_macro _oams_macro_variables"].pre_cut_speed %}
    {% set cut_x = printer["gcode_macro _oams_macro_variables"].cut_x %}
    {% set cut_y = printer["gcode_macro _oams_macro_variables"].cut_y %}
    {% set cut_speed = printer["gcode_macro _oams_macro_variables"].cut_speed %}

    {% if printer.toolhead.homed_axes != 'xyz' %}
        RESPOND TYPE=command MSG='Homing'
        G28
    {% endif %}
    RESPOND TYPE=command MSG='Cutting'
    G0 X{pre_cut_x} Y{pre_cut_y} F{pre_cut_speed}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT=2.0
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT=2.0
    SET_SERVO SERVO={clippy_servo_name} ANGLE={clippy_cut_angle}
    M400
    G0 X{cut_x} Y{cut_y} F{cut_speed}
    G4 P1000
    G0 X{pre_cut_x} Y{pre_cut_y} F{pre_cut_speed}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT=1.13
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT=1.13
    SET_SERVO SERVO={clippy_servo_name} ANGLE={clippy_minimum_angle}
    M83
    G92 E0
   
    #M400 ; wait for all moves to end


[gcode_macro CUT_FILAMENT2]
variable_clippy_servo_name: 'clippy'
variable_clippy_minimum_angle: 120 # Idle position
variable_clippy_cut_angle: 0 # Cutting position
gcode:
    {% set pre_cut_x = printer["gcode_macro _oams_macro_variables"].pre_cut_x %}
    {% set pre_cut_y = printer["gcode_macro _oams_macro_variables"].pre_cut_y %}
    {% set pre_cut_speed = printer["gcode_macro _oams_macro_variables"].pre_cut_speed %}
    {% set cut_x = printer["gcode_macro _oams_macro_variables"].cut_x %}
    {% set cut_y = printer["gcode_macro _oams_macro_variables"].cut_y %}
    {% set cut_speed = printer["gcode_macro _oams_macro_variables"].cut_speed %}

    {% if printer.toolhead.homed_axes != 'xyz' %}
        RESPOND TYPE=command MSG='Homing'
        G28
    {% endif %}
    RESPOND TYPE=command MSG='Cutting'
    G0 X{pre_cut_x} Y{pre_cut_y} F{pre_cut_speed}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT=2.0
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT=2.0
    SET_SERVO SERVO={clippy_servo_name} ANGLE={clippy_cut_angle}
    M400
    G0 X{cut_x-1} Y{cut_y} F{cut_speed}
    G4 P1000
    G0 X{pre_cut_x} Y{pre_cut_y} F{pre_cut_speed}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT=1.13
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT=1.13
    SET_SERVO SERVO={clippy_servo_name} ANGLE={clippy_minimum_angle}
    M83
    G92 E0
    
    #M400 ; wait for all moves to end

[gcode_macro SAFE_UNLOAD_FILAMENT1]

variable_pause_triggered = False

gcode:
    {% set UNLOAD_SPEED = 1000 %}
    {% set ADDITIONAL_UNLOAD_SPEED = 5000 %}
    {% set ADDITIONAL_TIME_ON = 2.0 %}
    {% set ADDITIONAL_EXTRUSION_AMOUNT = ADDITIONAL_UNLOAD_SPEED / 60.0 * (ADDITIONAL_TIME_ON + 1.0) %}
	{% set retract_length = printer["gcode_macro _oams_macro_variables"].retract_length %}
	{% set extrusion_unload_length = printer["gcode_macro _oams_macro_variables"].extrusion_unload_length %}
	{% set fs_extruder_out1 = printer["gcode_macro _oams_macro_variables"].fs_extruder_out1 %}
    {% set heater =  printer.toolhead.extruder %}
    {% set target_temp = printer[heater].target %}
    {% set current_target_temp  = printer.extruder.target|int %}
    SELECT_TOOL T=4
    M104 S{target_temp}
    M117 Nozzle heating...
    {action_respond_info("Nozzle not hot enough!")}
    {action_respond_info("Nozzle heating...")}
    {% if target_temp < 210 %}
        M109 S210  ; Set the target temperature to 210°C if the given target temp is less than 210°C
    {% else %}
        M109 S{target_temp}  ; Otherwise, set the target temperature to the given value
    {% endif %}
    
    OAMSM_FOLLOWER ENABLE=1 DIRECTION=0 FPS=fps1
    M83
    G92 E0
    G1 E-{retract_length}
    AFC_CUT
    #CUT_FILAMENT1
    UNSELECT_TOOL
    # PARK_MACRO ; uncomment this line if you have a park macro, and rename it to whatever your park macro is called
    SET_GCODE_OFFSET X=0 Y=0 Z=0
    SET_STEPPER_ENABLE STEPPER=extruder4 ENABLE=1
    M83
    G92 E0
    G1 E-{extrusion_unload_length} F{UNLOAD_SPEED}
    M400
    _UNLOAD_FS_OUT1
    {% if pause_triggered == False %}
     # G1 E-{ADDITIONAL_EXTRUSION_AMOUNT} F{ADDITIONAL_UNLOAD_SPEED}
      # wait 1 second so the extruder is fully to speed
      #G4 P1000
      OAMSM_UNLOAD_FILAMENT FPS=fps1
      M400
     # SELECT_TOOL T=4
    {% endif %}


[gcode_macro SAFE_UNLOAD_FILAMENT2]

variable_pause_triggered = False

gcode:
    {% set UNLOAD_SPEED = 1000 %}
    {% set ADDITIONAL_UNLOAD_SPEED = 5000 %}
    {% set ADDITIONAL_TIME_ON = 2.0 %}
    {% set ADDITIONAL_EXTRUSION_AMOUNT = ADDITIONAL_UNLOAD_SPEED / 60.0 * (ADDITIONAL_TIME_ON + 1.0) %}
	{% set retract_length = printer["gcode_macro _oams_macro_variables"].retract_length %}
	{% set extrusion_unload_length = printer["gcode_macro _oams_macro_variables"].extrusion_unload_length %}
	{% set fs_extruder_out2 = printer["gcode_macro _oams_macro_variables"].fs_extruder_out2 %}
    {% set heater =  printer.toolhead.extruder %}
    {% set target_temp = printer[heater].target %}
    {% set current_target_temp  = printer.extruder.target|int %}
    SELECT_TOOL T=5
    M104 S{target_temp}
    M117 Nozzle heating...
    {action_respond_info("Nozzle not hot enough!")}
    {action_respond_info("Nozzle heating...")}
    {% if target_temp < 210 %}
        M109 S210  ; Set the target temperature to 210°C if the given target temp is less than 210°C
    {% else %}
        M109 S{target_temp}  ; Otherwise, set the target temperature to the given value
    {% endif %}
    
    OAMSM_FOLLOWER ENABLE=1 DIRECTION=0 FPS=fps2
    M83
    G92 E0
    G1 E-{retract_length}
    AFC_CUT
    #CUT_FILAMENT2
    UNSELECT_TOOL
    # PARK_MACRO ; uncomment this line if you have a park macro, and rename it to whatever your park macro is called
    SET_GCODE_OFFSET X=0 Y=0 Z=0
    SET_STEPPER_ENABLE STEPPER=extruder5 ENABLE=1
    M83
    G92 E0
    G1 E-{extrusion_unload_length} F{UNLOAD_SPEED}
    M400
    _UNLOAD_FS_OUT2
    {% if pause_triggered == False %}
      #G1 E-{ADDITIONAL_EXTRUSION_AMOUNT} F{ADDITIONAL_UNLOAD_SPEED}
      # wait 1 second so the extruder is fully to speed
     # G4 P1000
      OAMSM_UNLOAD_FILAMENT FPS=fps2
      M400
    #  SELECT_TOOL T=5
    {% endif %}
    

[gcode_macro _TX1]

variable_pause_triggered = False

gcode:
    {% set hotend_meltzone_compensation = printer["gcode_macro _oams_macro_variables"].hotend_meltzone_compensation %}
    {% set retract_length = printer["gcode_macro _oams_macro_variables"].retract_length %}
    {% set extrusion_reload_length = printer["gcode_macro _oams_macro_variables"].extrusion_reload_length %}
    {% set extrusion_unload_length = printer["gcode_macro _oams_macro_variables"].extrusion_unload_length %}
    {% set reload_speed = printer["gcode_macro _oams_macro_variables"].reload_speed %}
    {% set GROUP = params.GROUP %}
    {% set LOADED_GROUP = printer['oams_manager']['fps fps1'].current_group %}
    {% set RELOAD_LENGTH = (extrusion_reload_length + retract_length + hotend_meltzone_compensation) %}
    
    {% set heater =  printer.toolhead.extruder %}
    {% set target_temp = printer[heater].target %}
    {% set current_target_temp  = printer.extruder.target|int %}
    #SELECT_TOOL T=4
    M104 S{target_temp}
    M117 Nozzle heating...
    {action_respond_info("Nozzle not hot enough!")}
    {action_respond_info("Nozzle heating...")}
    {% if target_temp < 210 %}
        M109 S210  ; Set the target temperature to 210°C if the given target temp is less than 210°C
    {% else %}
        M109 S{target_temp}  ; Otherwise, set the target temperature to the given value
    {% endif %}
    
    # this is a fix for orca slicer's mishandling of change overs during object exclusion
    # Orcas issued a change over of color without first ending the currently excluded object
    # we are now going to ignore change overs if we are ignoring the excluding object
    # because of this bug, the starting color on the next object after exclusionn might not be correct
    {% if printer.toolhead.homed_axes != 'xyz' %}
        RESPOND TYPE=command MSG='Homing'
        G28
    {% endif %}
    {% if printer.exclude_object.current_object not in printer.exclude_object.excluded_objects %}
      {% if LOADED_GROUP == GROUP %}
        RESPOND TYPE=command MSG='Toolhead already loaded with {GROUP}'
      {% elif LOADED_GROUP != GROUP %}
        RESPOND TYPE=command MSG='Switching {LOADED_SPOOL} -> {GROUP}' 
        {% if LOADED_GROUP is not none %}
          SAFE_UNLOAD_FILAMENT1
        {% endif %}
        UNSELECT_TOOL
        SET_GCODE_OFFSET X=0 Y=0 Z=0
        M83
        OAMSM_LOAD_FILAMENT GROUP={GROUP}
        M400
        G4 P1000
        _LOAD_FS_IN1
        {% if pause_triggered == False %}
          M83
          G92 E0
          G1 E{RELOAD_LENGTH} F{reload_speed}
          M400
          G4 P1000
          _LOAD_FS_OUT1
          {% if pause_triggered == False %}
            # Place all other code after reload here
          SAVE_GCODE_STATE NAME=purge_ready
           M106 S255
          M83
          G92 E0
          G1 E40 F350
          G92 E0
          G1 E-3 F350
          M106 S0
          #G0 Z{15}
          #CLEAN_NOZZLE
          SELECT_TOOL T=4
          RESTORE_GCODE_STATE NAME=purge_ready MOVE=1 MOVE_SPEED=400
          {% if current_target_temp == 0 or printer.print_stats.state != "paused"%}
            M104 S0
            SELECT_TOOL T=4
          {% endif %}
        {% endif %}
      {% endif %}
    {% endif %}
    {% endif %}

[gcode_macro _TX2]

variable_pause_triggered = False

gcode:
    {% set hotend_meltzone_compensation = printer["gcode_macro _oams_macro_variables"].hotend_meltzone_compensation %}
    {% set retract_length = printer["gcode_macro _oams_macro_variables"].retract_length %}
    {% set extrusion_reload_length = printer["gcode_macro _oams_macro_variables"].extrusion_reload_length %}
    {% set extrusion_unload_length = printer["gcode_macro _oams_macro_variables"].extrusion_unload_length %}
    {% set reload_speed = printer["gcode_macro _oams_macro_variables"].reload_speed %}
    {% set GROUP = params.GROUP %}
    {% set LOADED_GROUP = printer['oams_manager']['fps fps2'].current_group %}
    {% set RELOAD_LENGTH = (extrusion_reload_length + retract_length + hotend_meltzone_compensation) %}
    
    {% set heater =  printer.toolhead.extruder %}
    {% set target_temp = printer[heater].target %}
    {% set current_target_temp  = printer.extruder.target|int %}
   # SELECT_TOOL T=5
    M104 S{target_temp}
    M117 Nozzle heating...
    {action_respond_info("Nozzle not hot enough!")}
    {action_respond_info("Nozzle heating...")}
    {% if target_temp < 210 %}
        M109 S210  ; Set the target temperature to 210°C if the given target temp is less than 210°C
    {% else %}
        M109 S{target_temp}  ; Otherwise, set the target temperature to the given value
    {% endif %}
    
    # this is a fix for orca slicer's mishandling of change overs during object exclusion
    # Orcas issued a change over of color without first ending the currently excluded object
    # we are now going to ignore change overs if we are ignoring the excluding object
    # because of this bug, the starting color on the next object after exclusionn might not be correct
    {% if printer.toolhead.homed_axes != 'xyz' %}
        RESPOND TYPE=command MSG='Homing'
        G28
    {% endif %}
    {% if printer.exclude_object.current_object not in printer.exclude_object.excluded_objects %}
      {% if LOADED_GROUP == GROUP %}
        RESPOND TYPE=command MSG='Toolhead already loaded with {GROUP}'
      {% elif LOADED_GROUP != GROUP %}
        RESPOND TYPE=command MSG='Switching {LOADED_SPOOL} -> {GROUP}' 
        {% if LOADED_GROUP is not none %}
          SAFE_UNLOAD_FILAMENT2
        {% endif %}
        UNSELECT_TOOL
        SET_GCODE_OFFSET X=0 Y=0 Z=0
        M83
        OAMSM_LOAD_FILAMENT GROUP={GROUP}
        M400
        G4 P1000
        _LOAD_FS_IN2
        {% if pause_triggered == False %}
          M83
          G92 E0
          G1 E{RELOAD_LENGTH} F{reload_speed}
          M400
          G4 P1000
          _LOAD_FS_OUT2
          {% if pause_triggered == False %}
            # Place all other code after reload here
          SAVE_GCODE_STATE NAME=purge_ready
           M106 S255
          M83
          G92 E0
          G1 E40 F350
          G92 E0
          G1 E-3 F350
          M106 S0
          #G0 Z{15}
          #CLEAN_NOZZLE
          SELECT_TOOL T=5
          RESTORE_GCODE_STATE NAME=purge_ready MOVE=1 MOVE_SPEED=400
          {% if current_target_temp == 0 or printer.print_stats.state != "paused"%}
            M104 S0
            SELECT_TOOL T=5
          {% endif %}
        {% endif %}
      {% endif %}
    {% endif %}
    {% endif %}
    
    
[gcode_macro _LOAD_FS_IN1]
gcode:
    {% set fs_extruder_in1 = printer["gcode_macro _oams_macro_variables"].fs_extruder_in1 %}
   
    {% if fs_extruder_in1 and not printer['filament_switch_sensor filament_sensor_T4'].filament_detected %}
       RESPOND TYPE=error MSG='Filament not detected at toolhead extruder inlet... pausing for user intervention'
       SET_GCODE_VARIABLE MACRO=_TX1 VARIABLE=pause_triggered VALUE=True
       PAUSE
    {% elif fs_extruder_in1 and printer['filament_switch_sensor filament_sensor_T4'].filament_detected %} 
        RESPOND TYPE=command MSG='Filament detected at toolhead extruder inlet... continue loading'
    {% endif %}
    
[gcode_macro _LOAD_FS_OUT1]
gcode:
    {% set fs_extruder_out1 = printer["gcode_macro _oams_macro_variables"].fs_extruder_out1 %}
    
    {% if fs_extruder_out1 and not printer['filament_switch_sensor extruder_out1'].filament_detected %}
        RESPOND TYPE=error MSG='Filament not detected between toolhead extruder and hotend... pausing for user intervention'
        SET_GCODE_VARIABLE MACRO=_TX1 VARIABLE=pause_triggered VALUE=True
        PAUSE
    {% elif fs_extruder_out1 and printer['filament_switch_sensor extruder_out1'].filament_detected %}
        RESPOND TYPE=command MSG='Filament successfully loaded through extruder... continue'
    {% endif %}

[gcode_macro _UNLOAD_FS_OUT1]
gcode:
    {% set fs_extruder_out1 = printer["gcode_macro _oams_macro_variables"].fs_extruder_out1 %}
    
    {% if fs_extruder_out1 and printer['filament_switch_sensor extruder_out1'].filament_detected %}
        RESPOND TYPE=error MSG='Filament detected between extruder and hotend!  This is most likely a failure to cut the filament, or the settings are incorrect and the extrusion_unload_length is insufficient to retract the remaining filament past the gears of the extruder   ... pausing for user intervention'
        SET_GCODE_VARIABLE MACRO=SAFE_UNLOAD_FILAMENT1 VARIABLE=pause_triggered VALUE=True
        PAUSE
    {% elif fs_extruder_out1 and  not printer['filament_switch_sensor extruder_out1'].filament_detected %}
        RESPOND TYPE=command MSG='Filament retracted past extruder... continue'
    {% endif %}

[gcode_macro _LOAD_FS_IN2]
gcode:
    {% set fs_extruder_in2 = printer["gcode_macro _oams_macro_variables"].fs_extruder_in2 %}
   
    {% if fs_extruder_in2 and not printer['filament_switch_sensor filament_sensor_T5'].filament_detected %}
       RESPOND TYPE=error MSG='Filament not detected at toolhead extruder inlet... pausing for user intervention'
       SET_GCODE_VARIABLE MACRO=_TX2 VARIABLE=pause_triggered VALUE=True
       PAUSE
    {% elif fs_extruder_in2 and printer['filament_switch_sensor filament_sensor_T5'].filament_detected %} 
        RESPOND TYPE=command MSG='Filament detected at toolhead extruder inlet... continue loading'
    {% endif %}
    
[gcode_macro _LOAD_FS_OUT2]
gcode:
    {% set fs_extruder_out2 = printer["gcode_macro _oams_macro_variables"].fs_extruder_out2 %}
    
    {% if fs_extruder_out2 and not printer['filament_switch_sensor extruder_out2'].filament_detected %}
        RESPOND TYPE=error MSG='Filament not detected between toolhead extruder and hotend... pausing for user intervention'
        SET_GCODE_VARIABLE MACRO=_TX2 VARIABLE=pause_triggered VALUE=True
        PAUSE
    {% elif fs_extruder_out2 and printer['filament_switch_sensor extruder_out2'].filament_detected %}
        RESPOND TYPE=command MSG='Filament successfully loaded through extruder... continue'
    {% endif %}

[gcode_macro _UNLOAD_FS_OUT2]
gcode:
    {% set fs_extruder_out2 = printer["gcode_macro _oams_macro_variables"].fs_extruder_out2 %}
    
    {% if fs_extruder_out2 and printer['filament_switch_sensor extruder_out2'].filament_detected %}
        RESPOND TYPE=error MSG='Filament detected between extruder and hotend!  This is most likely a failure to cut the filament, or the settings are incorrect and the extrusion_unload_length is insufficient to retract the remaining filament past the gears of the extruder   ... pausing for user intervention'
        SET_GCODE_VARIABLE MACRO=SAFE_UNLOAD_FILAMENT2 VARIABLE=pause_triggered VALUE=True
        PAUSE
    {% elif fs_extruder_out2 and  not printer['filament_switch_sensor extruder_out2'].filament_detected %}
        RESPOND TYPE=command MSG='Filament retracted past extruder... continue'
    {% endif %}

# Usage: OAMS_TORTURE_TEST LOOPS=10
# This macro will load and unload each spool the parameter SPOOL number times
# [gcode_macro OAMS_TORTURE_TEST]
# gcode:
#   {% set num = params.LOOPS|int %}
#   {% for i in range(num) %}
#        {% for j in range(4) %}
#             OAMS_LOAD_SPOOL OAMS=1 SPOOL={j}
#             OAMS_UNLOAD_SPOOL OAMS=1
#        {% endfor %}
#        RESPOND TYPE=command MSG='Number of loops now {i+1}'
#   {% endfor %}


# Usage: OAMS_TOOLCHANGE_TORTURE_TEST LOOPS=10
# This macro will load and unload each spool the parameter SPOOL number times
# going through the entire routine of a tool change, including purging the filament
# This is used to ascertain the reliability of the tool change macros
# and toolhead extruder loading and unloading routines
# [gcode_macro OAMS_TOOLCHANGE_TORTURE_TEST]
# variable_extrusion_amount = 30
# variable_extrusion_speed = 300
# variable_extrusion_z_height = 100
# gcode:
#   {% set num = params.LOOPS|int %}
#   G0 Z{extrusion_z_height} F30
#   {% for i in range(num) %}
#        {% for j in range(4) %}
#             T{j}
#             RESPOND TYPE=command MSG='Purging {extrusion_amount}mm of filament'
#        {% endfor %}
#        RESPOND TYPE=command MSG='Number of loops now {i+1}'
#   {% endfor %}

  
  # The following macros are just placeholders necessary to
# configure up to 16 different toolchanger commands
# if you are using more than 4 ams, you will need to add another
# 4 toolchanges for each additional OAMS

# [gcode_macro T0]
# gcode:
#   _TX GROUP=T0

# [gcode_macro T1]
# gcode:
#   _TX GROUP=T1

# [gcode_macro T2]
# gcode:
#   _TX GROUP=T2

# [gcode_macro T3]
# gcode:
#   _TX GROUP=T3

# enable for 2nd OAMS

#[gcode_macro T4]
#gcode:
#  _TX GROUP=T4

#[gcode_macro T5]
#gcode:
# _TX GROUP=T5

#[gcode_macro T6]
#gcode:
#  _TX GROUP=T6

#[gcode_macro T7]
#gcode:
#  _TX GROUP=T7

#enable for 3rd OAMS

#[gcode_macro T8]
#gcode:
#  _TX GROUP=T8

#[gcode_macro T9]
#gcode:
#  _TX GROUP=T9

#[gcode_macro T10]
#gcode:
#  _TX GROUP=T10

#[gcode_macro T11]
#gcode:
#  _TX GROUP=T11

#enable for 4th OAMS

#[gcode_macro T12]
#gcode:
#  _TX GROUP=T12

#[gcode_macro T13]
#gcode:
#  _TX GROUP=T13

#[gcode_macro T14]
#gcode:
#  _TX GROUP=T14

#[gcode_macro T15]
#gcode:
#  _TX GROUP=T15

# example to enable additional 4 toolchanger commands / colors when using 5 OAMSs

# [gcode_macro T16]
# gcode:
#   _TX GROUP=T16

# [gcode_macro T17]
# gcode:
#   _TX GROUP=T17

# [gcode_macro T18]
# gcode:
#   _TX GROUP=T18

# [gcode_macro T19]
# gcode:
#   _TX GROUP=T19

