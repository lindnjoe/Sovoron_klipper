# Original written by Viesturs Zarins
# Modified by Justin F. Hallett

[toolchanger]
  t_command_restore_axis: Z
  params_safe_y: 120
  params_close_y: 15
  params_fast_speed: 55000 # Go as fast as we can
  params_path_speed: 30000 # 20mm/s for the actual change
  # Path positions relative to the park position
  # use x,y,z; f= multiplier to path speed; verify= Verify tool detected at end of the move.

  # CHANGE THIS!!! Set the path for your printer, see tool_paths.md
  params_dropoff_path: [{'z':3.5, 'y':4}, {'z':0, 'y':0}, {'z':-12, 'y':0}]
  params_pickup_path: [{'z':-12, 'y':2}, {'z':-12, 'y':0}, {'z':1.5, 'y':0, 'f':0.5, 'verify':1}, {'z':0.5, 'y':2.5, 'f':0.5}, {'z':8, 'y':8}, ]  

  # Parking position - per tool
  #params_park_x: 142.2
  #params_park_y: -6.0
  #params_park_z: 308.2
  # Default shaper params
  params_input_shaper_freq_x: 62.4
  params_input_shaper_freq_y: 88.6
  initialize_on: home
  require_tool_present: True

  error_gcode:
    PAUSE

  before_change_gcode:
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
       SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="''"
    {% endif %}

  after_change_gcode:
    {% set tn = "T"+(tool.tool_number|string) %}
    {% if printer["gcode_macro " + tn ] %}
       SET_GCODE_VARIABLE MACRO={tn} VARIABLE=color VALUE="'c44'"
    {% endif %}
    {% if tool.params_input_shaper_freq_x %}
      SET_INPUT_SHAPER SHAPER_FREQ_X={tool.params_input_shaper_freq_x} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y}
    {% endif %}

  dropoff_gcode:
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool.params_dropoff_path %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set cur_z = printer.toolhead.position[2]|float %}
    RESPOND TYPE=echo MSG='Dropping off {tool.name}'
    G90
    ; Move 1 mm up to avoid crashing into things
    G0 Z{ [cur_z+1.0, max_z]|min } F{fast}
    #   ##############  Move up to the dock  ##############
    ROUNDED_G0 Y={tool.params_safe_y} D=20 F={fast}
    ROUNDED_G0 X={x} D=150 F={fast}
    ROUNDED_G0 Z={z + path[0]['z']|float} D=20 F={fast}
    ROUNDED_G0 Y={y + path[0]['y']|float} D=0 F={fast}
    STOP_CRASH_DETECTION
    #  ############## Run the path ##############
    {% for pos in path %}
      {% set speed = tool.params_path_speed|float * (pos.get('f', 1.0)|float) %}
      G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{speed}
    {% endfor %}
    ## Return to safe Y if no pickup_tool
    {% if pickup_tool is none %}
      G0 Y{tool.params_safe_y} F{fast}
    {% endif %}
    

  pickup_gcode:
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool.params_pickup_path %}
    RESPOND TYPE=echo MSG='Picking up {tool.name}'
    G90
    #   ##############  Fast to the last point  ##############
    ROUNDED_G0 Y={tool.params_close_y} F={fast} D=5
    ROUNDED_G0 X={x} Z={z + path[0]['z']|float} F={fast} D=5
    ROUNDED_G0 Y={y + path[0]['y']|float} F={fast} D=0
    # Wait for temp before actually picking up the tool, while the nozzle is resting on it's pad.

    {% if tool.extruder %}
      M109 T{tool.tool_number} S{printer[tool.extruder].target|int}
    {% endif %}
    # Run the path
    {% for pos in path %}
      {% set speed = tool.params_path_speed|float * (pos.get('f', 1.0)|float) %}
      G0 {% if 'x' in pos %}X{x + pos['x']|float}{% endif %} {% if 'y' in pos %}Y{y + pos['y']|float}{% endif %} {% if 'z' in pos %}Z{z + pos['z']|float }{% endif %} F{speed}
      {% if 'verify' in pos %}
        VERIFY_TOOL_DETECTED T={tool.tool_number}
      {% endif %}
    {% endfor %}
    # Restore the position with smooth rounded move.
    ROUNDED_G0 Y={tool.params_safe_y} F={fast} D=20
    {% if 'Z' in restore_position %}
      ROUNDED_G0 Z={restore_position.Z} F={fast} D=150
    {% endif %}
    {% if 'X' in restore_position %}
      ROUNDED_G0 X={restore_position.X} F={fast} D=1000
    {% endif %}
    {% if 'Y' in restore_position %}
      ROUNDED_G0 Y={restore_position.Y} F={fast} D=0
    {% endif %}
    ROUNDED_G0 D=0

[gcode_macro RESUME]
rename_existing: RESUME_BASE
gcode:
  INITIALIZE_TOOLCHANGER
  VERIFY_TOOL_DETECTED
  RESUME_BASE

[gcode_macro TOOL_ALIGN_START]
gcode:
    INITIALIZE_TOOLCHANGER # Detect current tool
    _TOOL_ALIGN_START

[gcode_macro _TOOL_ALIGN_START]
gcode:
    {% set tool = printer[printer.toolchanger.tool] %}
    SET_TOOL_PARAMETER PARAMETER='params_path_speed' VALUE=300
    SET_GCODE_OFFSET X=0 Y=0 Z=0
    G0 Y{tool.params_safe_y} F{tool.params_fast_speed}
    G0 X{tool.params_park_x} Z{tool.params_park_z}
    G0 Y{tool.params_park_y|float + 100.0}

[gcode_macro TOOL_ALIGN_TEST]
gcode:
    {% set curpos = printer.gcode_move.gcode_position %}
    {% if curpos[1] > 0 %}
      # Check if Y is not too far, to very unrealistic tests.
      RESPOND TYPE=error MSG='Test aborted. Tool too far away from the dock.'
    {% else %}
      INITIALIZE_TOOLCHANGER # Detect current tool
      SET_GCODE_OFFSET X=0 Y=0 Z=0
      SET_TOOL_PARAMETER PARAMETER='params_park_x' VALUE={curpos[0]}
      SET_TOOL_PARAMETER PARAMETER='params_park_y' VALUE={curpos[1]}
      SET_TOOL_PARAMETER PARAMETER='params_park_z' VALUE={curpos[2]}
      TEST_TOOL_DOCKING RESTORE_AXIS=XYZ
    {% endif %}

[gcode_macro TOOL_ALIGN_DONE]
gcode:
    {% set tool = printer[printer.toolchanger.tool] %}
    SAVE_TOOL_PARAMETER PARAMETER='params_park_x'
    SAVE_TOOL_PARAMETER PARAMETER='params_park_y'
    SAVE_TOOL_PARAMETER PARAMETER='params_park_z'
    RESET_TOOL_PARAMETER PARAMETER='params_path_speed'
    G0 Y{tool.params_safe_y} F{tool.params_fast_speed}


# [toolchanger]
#   t_command_restore_axis: Z
#   # Options for sensorless homing
#   # NOTE: AWD the front motors will be set to 0.1 automatically
#   homing_current: 0.4
#   stepper_driver: tmc5160
#   sensorless_x: True # Should X axis be sensorless or not. True for sensorless, False for switch
#   sensorless_y: True # Should Y axis be sensorless or not. True for sensorless, False for switch
#   # Homing Options
#   homing_usetap: True
#   homing_toolless: False
#   homing_rebound_y: 20.0 # The amount to move on the Y axis after homing Y, this is important for switch homing so have the proper distance for X homing.
#   tools_preheat: True # Preheat tools in PRINT_START if the slicer sends the heat values
#   # Docking options
#   params_safe_y: 95 # This should be the thickness of your thickest tool from the park_y. If park_y is 0 and your thickest tool is 80, this should be 80
#   params_close_y: 15 # This should be the thickness of the shuttle and a little buffer
#   params_fast_speed: 55000 # Go as fast as we can 30000
#   params_path_speed: 30000 # 20mm/s for the actual change 6000
#   params_changer_type: 'sc' # sc, tc_pads, tc_rods
#   params_dock_type: 'modular' # modular, tc_sb, tc_mini, hookon
  
#   # The dropoff path of each tool type, pickup path is the same in reverse. Dont change unless you know what you are doing.
#   # Full path is build in this order for drop off:
#   # -> dock_path
#   # -> f:0.5 (this is the param_park location and sensor detection)
#   # -> changer_path
 
#  # params_changer_sc_path: [{'y':9.5 ,'z':6}, {'y':9.5, 'z':2}, {'y':5.5, 'z':0}, {'z':0, 'y':0, 'f':0.5}, {'z':-10, 'y':0}, {'z':-10, 'y':16}, {'y':3, 'z':3}]
#   params_changer_sc_path: [{'z':-8}, {'z':-8, 'y':24}]
#   params_changer_tc_pads_path: [{'z':-5}, {'y':1, 'z':-7}, {'y':3, 'z':-9}, {'y':7, 'z':-11}]
#   params_changer_tc_rods_path: [{'z':-6}, {'z':-10, 'y':3}, {'z':-10, 'y':16}]
#   params_dock_modular_path: [{'y':3, 'z':3}]
#   params_dock_tc_sb_path: [{'y':9.5, 'z':8}, {'y':9.5, 'z':2}, {'y':5.5}]
#   params_dock_tc_mini_path: [{'y':9, 'z':2}, {'y':8}]
#   params_dock_hookon_path: [{'y':4}]
#   # Parking position - per tool
#   #params_park_x: 142.2
#   #params_park_y: -6.0
#   #params_park_z: 308.2
#   # Default shaper params
#   params_input_shaper_freq_x: 0
#   params_input_shaper_type_x: 'mzv'
#   params_input_shaper_damping_ratio_x: 0.1
#   params_input_shaper_freq_y: 0
#   params_input_shaper_type_y: 'mzv'
#   params_input_shaper_damping_ratio_y: 0.1
#   initialize_on: manual
#   initialize_gcode:
#     #RESPOND MSG="<div style='margin-top: 8px;'><img src='https://i.gifer.com/2M2E.gif' width='512' style='vertical-align:middle;' title=''></div>"
    
#     DETECT_ACTIVE_TOOL_PROBE
#     _INITIALIZE_FROM_DETECTED_TOOL

#   before_change_gcode: 
#     {% if tool.name %}
#       RESPOND TYPE=echo MSG='Before changing {tool.name}'
#       _TOOLCHANGER_TOOL_BEFORE_CHANGE TN={tool.name|replace('tool ', '', 1)}
#     {% endif %}

#   after_change_gcode: 
#     {% if tool.name %}
#       RESPOND TYPE=echo MSG='After changing {tool.name}'
#       _TOOLCHANGER_TOOL_AFTER_CHANGE TN={tool.name|replace('tool ', '', 1)}
#     # {% set active_ext = printer.toolhead.extruder %}
#     # {% set prev_pa = printer.configfile.settings[active_ext].pressure_advance %}
#     #  SET_PRESSURE_ADVANCE ADVANCE={prev_pa}
#     #  RESPOND TYPE=echo MSG='Set PA back'
#     {% endif %}
  
#   dropoff_gcode:
#     {% if tool.name %}
#       RESPOND TYPE=echo MSG='Dropping off {tool.name}'
#       _TOOLCHANGER_TOOL_DROPOFF TN={tool.name|replace('tool ', '', 1)}
#     {% endif %}

#   pickup_gcode:
#     {% if tool.name %}
#       RESPOND TYPE=echo MSG='Picking up {tool.name}'
#       _TOOLCHANGER_TOOL_PICKUP TN={tool.name|replace('tool ', '', 1)}
#     {% endif %}
