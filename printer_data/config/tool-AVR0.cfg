# This file contains example pin mappings for testing with the
# "simulavr" program. To use this config, compile the firmware for an
# AVR atmega644p, enable "low-level configuration options", and enable
# "simulavr software emulation". Further details are in
# docs/Debugging.md.

# See docs/Config_Reference.md for a description of parameters.

# AVR atmega644p Pins:
# PA0, PA1, PA2, PA3, PA4, PA5, PA6, PA7
# PB0, PB1, PB2, PB3, PB4, PB5, PB6, PB7
# PC0, PC1, PC2, PC3, PC4, PC5, PC6, PC7
# PD0, PD1, PD2, PD3, PD4, PD5, PD6, PD7

[mcu AVR0]
serial: /tmp/pseudoserial0
restart_method: arduino

[temperature_sensor AVR0_temp]
sensor_type: temperature_mcu
sensor_mcu: AVR0

[extruder]
step_pin: AVR0:PB1
dir_pin: !AVR0:PB0
enable_pin: !AVR0:PD6
heater_pin: AVR0:PD5
sensor_pin: AVR0:PA7
sensor_type: EPCOS 100K B57560G104F
control: watermark
microsteps: 16
rotation_distance: 33.683
nozzle_diameter: 0.400
filament_diameter: 1.750
min_temp: 0
max_temp: 250
min_extrude_temp: 50
max_extrude_only_distance: 50.0
pressure_advance: 0.1
pressure_advance_smooth_time: 0.01

[tmc2209 extruder]
uart_pin: AVR0:PB7
interpolate: false
run_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0

[fan_generic AVR0_partfan]
pin: AVR0:PB4

[heater_fan AVR0_hotend_fan]
pin: AVR0:PB5
heater: extruder
heater_temp: 50.0
kick_start_time: 0.5
#tachometer_pin: AVR0:PD7
#tachometer_ppr: 2
#tachometer_poll_interval: 0.0008

[tool AVR0]
tool_number: 0
extruder: extruder
fan: fan_generic AVR0_partfan
gcode_x_offset: 0
gcode_y_offset: 0
gcode_z_offset: 0
params_park_x: 28
params_park_y: 0
params_park_z: 200.0
params_close_y: 30.0
params_safe_y: 120.0
params_input_shaper_freq_x: 62.4
params_input_shaper_type_x: 'mzv'
params_input_shaper_freq_y: 88.6
params_input_shaper_type_y: 'mzv'

# Change tool number if needed
[tool_probe AVR0]
pin: !AVR0:PB6
tool: 0
z_offset: 0
speed: 5.0
samples: 3
samples_result: median
sample_retract_dist: 2.0
samples_tolerance: 0.02
samples_tolerance_retries: 3
activate_gcode:
  _TAP_PROBE_ACTIVATE HEATER=extruder TEMP=150

[adxl345 AVR0]
cs_pin: AVR0:PC4
spi_software_sclk_pin: AVR0:PC0
spi_software_mosi_pin: AVR0:PC1
spi_software_miso_pin: AVR0:PC2
axes_map: x,z,y

[filament_switch_sensor filament_sensor_AVR0]
switch_pin: AVR0:PC3
pause_on_runout: FALSE
runout_gcode:
  M117 Runout sensor AVR0 reports: Runout
  SET_GCODE_VARIABLE MACRO=AVR0 VARIABLE=filament_consumed VALUE=1
insert_gcode:
  M117 Runout sensor AVR0 reports: Filament Detected
  SET_GCODE_VARIABLE MACRO=AVR0 VARIABLE=filament_consumed VALUE=0

[gcode_macro AVR0]
variable_active: 0
variable_filament_consumed: 0
variable_hotend_fan_stop_count: 0 # counter for checking if hotend fan stalled
variable_hotend_fan_min_rpm: 1500 # minimum rpm the hotend can have before fan stall is triggered
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% else %}
    _TOOLCHANGER_DISABLE_FILAMENT_SENSORS
    SET_GCODE_VARIABLE MACRO=AVR0 VARIABLE=active VALUE=1
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SELECT_TOOL T=0
  {% endif %}

[gcode_macro T0]
variable_realtool: "AVR0"
variable_backuptool: "T1"
variable_color: ""
gcode:
  {% set consumed = printer["gcode_macro " ~ realtool].filament_consumed|int %}
  {% if consumed and backuptool %}
    { action_respond_info(realtool ~ " empty loading backup") }
    {backuptool}
  {% else %}
    { action_respond_info("Switching to " ~ realtool) }
    {realtool}
  {% endif %}
