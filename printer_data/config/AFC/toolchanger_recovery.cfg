[toolchanger]
params_failure_speed_divider: 5
params_failure_acceleration: 1000
recover_gcode:
    # ────── get all parameters for the tool were restoring
    {% set dock             = { 'x': tool['params_park_x']|float,
                                'y': tool['params_park_y']|float, 
                                'z': tool['params_park_z']|float } %}

    {% set tool_size        = tool.params_tool_size|default({'x': 60, 'y': 60, 'z': 90}) %}
    {% set close_y_force    = tool.params_close_y|default(40)|float %}
    {% set safe_y_force     = tool.params_safe_y|default(120)|float %}
    {% set fast             = tool.params_fast_speed|default(99999)|float %}
    {% set tn               = tool.tool_number %}
    {% set cur_pos          = printer.toolhead.position %}

    {% set safe_y           = [safe_y_force, (dock.y + tool_size.y)]|max %}
    {% set safe_y_d         = [10, (10 + (safe_y - tool_size.y) * 0.4142)]|max %}  # allow scaling deviation

    # ────── re-heat any tools that were cooled during failure
    {% set saved = printer['gcode_macro _TOOLCHANGE_ERROR_HANDLER'].get('tool_temps', {}) %}
    {% for _tn, _temp in saved.items() %}
        M104 T{ _tn } S{ _temp }
    {% endfor %}
    M109 T{ tn } S{ saved.get(tn) }
    SET_GCODE_VARIABLE MACRO=_TOOLCHANGE_ERROR_HANDLER VARIABLE=tool_temps VALUE={ {} }

    # ────── move clear of dock if the head is still inside
    {% if cur_pos.z > (dock.z - 20) and cur_pos.y < (safe_y) %}
        ROUNDED_G0 Y={safe_y} F={fast} D={safe_y_d}
    {% endif %}

    {% set rx = restore_position.get('X', False) %}
    {% set ry = restore_position.get('Y', False) %}
    {% set rz = restore_position.get('Z', False) %}

    # ────── possibly choose the decend Y if it falls within our min max
    {% set safe_y_max    = printer.toolhead.axis_maximum.y - tool_size.y - 10 %}
    {% set safe_y_min    = [safe_y_force, (dock.y + tool_size.y)]|max %}
    {% if ry and ry >= (safe_y_min + 10) and ry <= (safe_y_max - 10) %}
        {% set safe_y = ry %}
    {% endif %}

    # ────── join XZ segment if X is too short (corner ends up too sharp) 
    {% if rx and (dock.x - rx)|abs < 25.0 and rz %}  
        ROUNDED_G0 X={ rx } Z={ rz + 10 } F={ fast } D=200
    {% else %}
        {% if rz %} ROUNDED_G0 Z={ rz + 10 } F={ fast } D=200  {% endif %}
        {% if rx %} ROUNDED_G0 X={ rx }      F={ fast } D=1000 {% endif %}
    {% endif %}
    {% if ry %} ROUNDED_G0 Y={ ry } F={ fast }   D=50 {% endif %}
    {% if rz %} ROUNDED_G0 Z={ rz } F={ fast/5 } D=0  {% endif %}

    ROUNDED_G0 D=0
    {% if printer.print_stats.state|lower == 'printing' and 'tool_probe_endstop' in printer %}
        START_TOOL_PROBE_CRASH_DETECTION T={ tn }
    {% endif %}

    # IMPORTANT VERY VERY IMPORTANT
    # here we have to overwrite the pause state! or else it will just shoot back up to the docks!!!
    M400
    RESTORE_GCODE_STATE NAME=PAUSE_STATE MOVE=0
    SAVE_GCODE_STATE NAME=PAUSE_STATE
    RESUME_BASE

error_gcode:
    {% macro msg(s, prefix_color="--v-accent-base", msg_color="--p-text-color2") %}
        {% set pre  = "<span style=\"color: var(" ~ prefix_color ~ "); font-weight:bold;\">[toolchanger] </span>" %}
        { action_respond_info(pre ~ "<span style=\"color: var(" ~ msg_color ~ ");\">" ~ s ~ "</span>") }
    {% endmacro %}
    {% macro err(s) %}{ msg(s, prefix_color="--v-error-base", msg_color="--v-warning-base") }{% endmacro %}

    { err("toolchange failure. saving tooltemps.") }
    {% set dock = { 'x': tool['params_park_x']|float,
                    'y': tool['params_park_y']|float, 
                    'z': tool['params_park_z']|float } %}

    {% if printer.toolhead.position.z >= dock.z - 50 %}
        PAUSE_BASE
        SET_VELOCITY_LIMIT ACCEL={ tool.params_failure_acceleration|default(1000) }
        {% set temps = {} %}
        {% for t_name in printer.toolchanger.tool_names %}
            {% set _tool = printer[t_name] %}
            {% set temp  = printer[_tool.extruder].target %}
            {% set _     = temps.update( {_tool.tool_number: temp} ) %}
            M104 T{ _tool.tool_number } S0
        {% endfor %}
        SET_GCODE_VARIABLE MACRO=_TOOLCHANGE_ERROR_HANDLER VARIABLE=tool_temps VALUE="{ temps }"

        _TOOLCHANGE_ERROR_HANDLER T={ tool.tool_number }
        _TOOLCHANGE_ERROR_HANDLER RETRY=FAIL
        M400
        SET_VELOCITY_LIMIT ACCEL={ printer.toolhead.max_accel }
        _RAISE MSG="toolchange failure, current execution was stopped."

    {% else %} # ASYNC trigger.
        PAUSE_BASE
        _RAISE MSG="toolchange failure, failure in verify! not at expected position! not engaging recovery!!!"
    {% endif %}

[gcode_macro _RAISE]
gcode:
    { action_raise_error('<b>[_RAISE]</b> <span style="color: var(--v-warning-base);">' ~ params.MSG|default("dunno why") ~ '</span>') }


[gcode_macro _TOOLCHANGE_ERROR_HANDLER]
description: "A UI to allow you to handle toolchange failures and recover them"
variable_state: {}
variable_tool_temps: {}
gcode:
    {% set NAME = '_TOOLCHANGE_ERROR_HANDLER' %}
    {% set tc   = printer.toolchanger %}
    {% if tc.has_detection %}
        {% set actn = tc.detected_tool_number %}
    {% elif 'tool_probe_endstop' in printer %}
        {% set actn = printer.tool_probe_endstop.active_tool_number %}
    {% else %}
        { action_raise_error('you need some kind of detection setup to do this automatically...') }
    {% endif %}
    {% set tn = state.get('tool_failed', params.get('T', -1))|int(-1) %}
    { action_raise_error(NAME ~ ': Please first call with a T=<int> to recover.') if tn == -1 else '' }

    {% set tool       = printer[tc.tool_names[tn]] %}
    {% set speed_div  = tool.params_failure_speed_divider|default(5.0) %}
    {% set dock       = { 'x': tool['params_park_x']|float,
                          'y': tool['params_park_y']|float, 
                          'z': tool['params_park_z']|float } %}

    {% set path       = tool['params_pickup_path'] %}
    {% set close_y    = tool.params_close_y|float %}
    {% set safe_y     = tool.params_safe_y|float %}
    {% set mul        = state.get('speed_multiplier', 1.0)|float %}
    {% set div        = (1.0 if 'FAST' in params else speed_div)|float %}
    {% set accel      = (printer.toolhead.max_accel if 'FAST' in params else tool.failure_acceleration|default(1000)) %}
    {% set path_speed = (tool.params_path_speed|float / div) * mul %}
    {% set fast       = (tool.params_fast_speed|float / div) * mul %}

    {% if 'T' in params %}
        {% set _ = state.update({'tool_failed': tn, 'original_park': dock}) %}
    {% endif %}

    # ────────────────────────── UI helpers  ──────────────────────────
    {% macro ui(m) %}{- action_respond_info('action:prompt_' ~ m) -}{% endmacro %}
    {% macro but(m, sec=None) %}
        { ui('button_group_start') if sec in ['first','both'] else '' }
        { ui('button ' ~ m) }
        { ui('button_group_end')   if sec in ['last','both']  else '' }
    {% endmacro %}

    {% macro create_ui() %}
        {% set C_SLOW, C_FAST, C_RESET = (120,200,160), (225,120,145), (155,150,205) %}
        {% set AX_COL  = {'X': (200,110,120), 'Y': (120,185,150), 'Z': (120,150,210)} %}
        {% set STEP_A  = {-0.5:0.6, -0.1:0.5, 0.1:0.5, 0.5:0.6} %}
        {% set base_alpha = 0.70 %}

        { ui('begin Toolchange Failure Recovery (' ~ tool.name|replace('tool ', '') ~ ')') }

        { ui('text Try recovery') }
        { but('[ ⟳ try again ]|'     ~ NAME ~ ' RETRY=TRY|'        ~ 'rgba(80,145,160,0.85)', 'first') }
        { but('[ >>> try fast ]|'     ~ NAME ~ ' RETRY=TRY FAST=1|' ~ 'rgba(220,140,120,0.85)', 'last')  }
        { but('[ recover manually ]|' ~ NAME ~ ' MOVE_TO_MANUAL=1|' ~ 'rgba(170,160,200,0.80)', 'both') }
        { ui('show') }
        { ui('text Adjust docking position') }
        {% for AX, col in AX_COL.items() %}
            { ui('button_group_start') }
            {% for inc, a in STEP_A.items() %}
                {% set sgn = '+' if inc > 0 else '' %}
                { ui('button ' ~ AX ~ sgn ~ inc ~ '|' ~ NAME ~ ' AX=' ~ AX ~ ' AM=' ~ inc ~ '|' ~ 'rgba(' ~ col|join(',') ~ ',' ~ a ~ ')') }
            {% endfor %}
            { ui('button_group_end') }
        {% endfor %}
        { ui('show') }
        { ui('text Tune docking speed') }
        {% set cur = state.get('speed_multiplier', 1.0) %}
        {% set al1 = (0.10 if (cur - 1.0)|abs <= 0.01 else base_alpha) %}
        { but('×' ~ ('%.2f' % 1.0) ~ '|' ~ NAME ~ ' SPD=' ~ 1.0 ~ '|' ~ 'rgba(' ~ C_RESET|join(',') ~ ',' ~ al1 ~ ')', 'both') }
        { ui('button_group_start') }
        {% for mult in [0.25, 0.50, 1.50, 2.00] %}
            {% set rgb = C_SLOW if mult < 1 else (C_FAST if mult > 1 else C_RESET) %}
            {% set a   = (0.10 if (cur - mult)|abs <= 0.01 else base_alpha) %}
            { ui('button ×' ~ ('%.2f' % mult) ~ '|' ~ NAME ~ ' SPD=' ~ mult ~ '|' ~ 'rgba(' ~ rgb|join(',') ~ ',' ~ a ~ ')') }
        {% endfor %}
        { ui('button_group_end') }

        { but('button [ ♻ reset dock ]|' ~ NAME ~ ' RESET=1|' ~ 'rgba(' ~ C_RESET|join(',') ~ ',' ~ base_alpha ~ ')', 'both') }

        { ui('footer_button [ ✔ continue ]|' ~ NAME ~ ' CONTINUE=1|' ~ 'rgba(120,200,140,0.85)') }
        { ui('footer_button [ ✖ cancel ]|'   ~ NAME ~ ' CANCEL=1|'   ~ 'rgba(210,110,110,0.85)') }
        { ui('show') }

        {% set _ = state.update( {'modified_ui': False } ) %}
    {% endmacro %}

    # ───── movement helpers ─────
    {% macro run_path(mode) %}
        G90
        {% set m = {'from_verify_reverse': 0, 'to_verify': 1, 'from_verify': 2}.get(mode, -1) %}
        {% set steps = (path|reverse if m == 0 else path) %}
        {% set ns = namespace(emit = (m == 1)) %}
        {% for step in steps if m != -1 %}
            {% set isv = 'verify' in step %}
            {% set ns.emit = True if not ns.emit and m in [0, 2] and isv else ns.emit %}
            {% if ns.emit and not (isv and m == 2) %}
                {% set ff = (path_speed * step.get('f', 1.0)|float)|round(2) %}
                G0{%- for ax in ['x','y','z'] if ax in step -%}{' ' ~ ax|upper ~ (dock[ax]|float + step[ax]|float)}{%- endfor %} F{ff}
                {% set ns.emit = False if m == 1 and isv else ns.emit %}
            {% endif %}
        {% else %}
            { action_raise_error('run_path: invalid mode') }
        {% endfor %}
    {% endmacro %}

    {% macro print_updated_dock_pos() %}
        {% set out = [] %}
        {% for ax in ( 'x', 'y', 'z' ) %}
            {% set _ = out.append('params_park_' ~ ax ~ ': ' ~ ('%.2f' % dock[ax])) %}
            SAVE_TOOL_PARAMETER T={tn} PARAMETER={'params_park_' ~ ax}
        {% endfor %}
        {%- set block -%}
            <div style='margin:6px 0 3px 0;'><b>{NAME}</b><br>New docking position is:</div>
            <div class='accent--text text--lighten-1'
                 style='display:block; width:fit-content; max-width:100%; background:rgba(0,0,0,0.35); border:2px solid currentColor;
                        border-radius:4px; padding:0.5em; box-sizing:border-box;'>
                <pre class='text--primary' style='margin:0; display:inline-block; max-width:100%; white-space:pre; 
                            overflow:auto; line-height:1.25em; padding:0 1em; box-sizing:border-box;'>{ out|join('<br>') }
                </pre>
            </div>
            <blockquote class='accent--text text--lighten-1'
                        style='display:inline-block; width:fit-content; max-width:100%;
                               margin-top:0.6em; white-space:normal;
                               overflow-wrap:anywhere; word-break:break-word;
                               padding:0.5em 0.75em; border-left:3px solid currentColor;
                               background:rgba(255,255,255,0.06); line-height:1.25em;'>
                <span class='text--primary'>
                    Either manually save these values,<br>
                    or comment out the parking position in your config and call <b><code>SAVE_CONFIG</code></b>
                </span>
            </blockquote>
        {%- endset -%}
        { action_respond_info(block|replace('\n','')) }
    {% endmacro %}

    {% macro update_val(ax, val) %}
        {% if variable_helper is defined %}
            {% import variable_helper as svh with context %}
            { svh.svf_update('dock_' ~ tool.name|lower|replace('tool ', '') ~ '.' ~ ax, val) }
        {% endif %}
        SET_TOOL_PARAMETER T={tn} PARAMETER={ 'params_park_' ~ ax } VALUE={val}
        G91
        G0 {ax}{val}
        G90
    {% endmacro %}

    # ───── control flow ─────
    {% if 'CANCEL' in params %}
        { ui('end') }
        {% set _ = state.clear() %}
        { print_updated_dock_pos() }
        M400
        CANCEL_PRINT_BASE

    {% elif 'CONTINUE' in params and actn == tn %}
        { ui('end') }
        {% set _ = state.clear() %}
        { print_updated_dock_pos() }
        M400
        INITIALIZE_TOOLCHANGER RECOVER=1 T={tn}

    {% elif 'CONTINUE' in params and actn != tn and not state.get('modified_ui', True) %}
        { ui('text This cannot continue... Tool not detected.') }
        { but('DETECT_ACTIVE_TOOL_PROBE|DETECT_ACTIVE_TOOL_PROBE|rgba(120,200,140,0.85)', both) if not tc.has_detection else '' }
        { ui('show') }
        {% set _ = state.update( {'modified_ui': True } ) %}

    {% elif 'AX' in params and 'AM' in params %}
        {% set ax = params.AX|lower %}
        {% set am = params.AM|float %}
        {% set new_pos = (dock[ax]|float + am)|round(3) %}
        { update_val(ax, new_pos) }

    {% elif 'RESET' in params %}
        {% set op = state.get('original_park', {}) %}
        {% for ax in ['x','y','z'] if ax in op %}
            { update_val(ax, op[ax]) }
        {% else %}
            { action_raise_error(NAME ~ ': missing original snapshot, cannot restore.') }
        {% endfor %}

    {% elif 'MOVE_TO_MANUAL' in params %}
        SET_VELOCITY_LIMIT ACCEL={ accel }
        {'DETECT_ACTIVE_TOOL_PROBE' if not tc.has_detection else ''}
        ROUNDED_G0 Y={safe_y} F={fast} D=40
        ROUNDED_G0 D=0
        SET_VELOCITY_LIMIT ACCEL={ printer.toolhead.max_accel }

    {% elif 'RETRY' in params %}
        SET_VELOCITY_LIMIT ACCEL={ accel }
        {% if params.RETRY == 'TRY' %}
            {% if tn == actn %}
                { run_path('from_verify_reverse') }
            {% else %}
                ROUNDED_G0 Z={dock['z'] + path[0].get('z', 0)|float} F={fast} D=50
                ROUNDED_G0 X={dock['x']} F={fast} D=50
            {% endif %}
            ROUNDED_G0 Y={close_y} F={fast} D=5
            ROUNDED_G0{%- for ax in ['x','y','z'] -%}{' ' ~ ax|upper ~ '=' ~ (dock[ax] + path[0].get(ax, 0)|float)}{%- endfor %} F={fast} D=0
            { run_path('to_verify') }
            M400
            { 'DETECT_ACTIVE_TOOL_PROBE' if not tc.has_detection else '' }
            UPDATE_DELAYED_GCODE ID=_verify_pickup_error_handler DURATION=0.1
        {% elif params.RETRY == 'SUCCESS' %}
            { run_path('from_verify') }
        {% elif params.RETRY == 'FAIL' %}
            { run_path('from_verify_reverse') }
        {% endif %}
        SET_VELOCITY_LIMIT ACCEL={ printer.toolhead.max_accel }

    {% elif 'SPD' in params %}
        {% set _ = state.update({'speed_multiplier': params.SPD|float|round(2)}) %}
        { create_ui() }

    {% else %}
        { create_ui() }
    {% endif %}

    SET_GCODE_VARIABLE MACRO={NAME} VARIABLE=state VALUE="{state}"
    M400

[delayed_gcode _verify_pickup_error_handler]
gcode:
    {% set tc = printer.toolchanger %}
    {% if tc.has_detection %}
        {% set actn = tc.detected_tool_number %}
    {% elif 'tool_probe_endstop' in printer %}
        {% set actn = printer.tool_probe_endstop.active_tool_number %}
    {% endif %}
    {% set tn = printer['gcode_macro _TOOLCHANGE_ERROR_HANDLER'].state.tool_failed %}
    {% if tn == actn %}
        _toolchange_error_handler RETRY=SUCCESS
    {% else %}
        _toolchange_error_handler RETRY=FAIL
    {% endif %}