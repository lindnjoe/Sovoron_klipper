[gcode_macro _TOOL_DROPOFF]
gcode:
  {% set tn = params.TN|string %}
  {% set tool = printer['tool ' + tn] %}
  {% set x = tool.params_park_x|float %} 
  {% set y = tool.params_park_y|float %} 
  {% set z = tool.params_park_z|float %}
  {% set safe_y = tool.params_safe_y|float %}
  {% set fast = tool.params_fast_speed|float %}
  {% set path = tool['params_dock_' + tool.params_dock_type + '_path'] + [{'f':0.5}] + tool['params_changer_' + tool.params_changer_type + '_path'] %}
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
  {% set cur_z = printer.toolhead.position[2]|float %}
  G90
  ; Move 1 mm up to avoid crashing into things
  G0 Z{ [cur_z+1.0, max_z]|min } F{fast}    
  #   ##############  Move up to the dock  ##############    
  ROUNDED_G0 Y={safe_y} D=20 F={fast}
  ROUNDED_G0 X={x} D=150 F={fast}
  ROUNDED_G0 Z={z + path[0].get('z', 0)|float} D=20 F={fast}
  ROUNDED_G0 Y={y + path[0].get('y', 0)|float} X={x + path[0].get('x', 0)|float} D=0 F={fast}
  STOP_TOOL_PROBE_CRASH_DETECTION
  #  ############## Run the path ##############
  {% for pos in path %}
    G0 Y{y + pos.get('y', 0)|float} X{x + pos.get('x', 0)|float} Z{z + pos.get('z', 0)|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) }
  {% endfor %}
  SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_VARS VARIABLE=fan_speed VALUE={ printer[tool.fan].speed * 255|default(0)|int }
  M106 S0 T{tn}
  
   ## Return to safe Y if no pickup_tool
    {% if pickup_tool is none %}
      G0 Y{tool.params_safe_y} F{fast}
    {% endif %}


[gcode_macro AFC_PARK]
;rename_existing: AFC_PARK1
gcode:
  UNSELECT_TOOL
  

[gcode_macro LOAD_NOZZLE]

gcode:
  {% set lane = printer['AFC'].current_load %}

  {% if lane in ['lane0', 'lane1', 'lane2', 'lane3'] %}
    AFC_POOP
    AFC_KICK
  
  {% else %}
    {% set msg = "Lane loaded from AMS " ~ lane %}
    M117 {msg}
    RESPOND PREFIX=AFC MSG="{msg}"
  {% endif %}

[gcode_macro AFC_MAP_RESET]
gcode:
 RESET_AFC_MAPPING


[gcode_macro AFC1]
gcode:
  {% set lane = printer['AFC'].next_lane %}

  {% if lane in ['lane0', 'lane1', 'lane2', 'lane3'] %}
    AFC
      
  {% elif lane == 'lane4' %}
   # SAFE_UNLOAD_FILAMENT1
    #CUT_FILAMENT1

  {% elif lane == 'lane6' %}
    #SAFE_UNLOAD_FILAMENT1
    #CUT_FILAMENT1

  {% elif lane == 'lane7' %}
    #SAFE_UNLOAD_FILAMENT1
   # CUT_FILAMENT1

  {% elif lane == 'lane8' %}
    #SAFE_UNLOAD_FILAMENT1
   # CUT_FILAMENT1 

  {% elif lane == 'lane5' %}
    #SAFE_UNLOAD_FILAMENT2
   # CUT_FILAMENT2

  {% elif lane == 'lane9' %}
    #SAFE_UNLOAD_FILAMENT2
   # CUT_FILAMENT2

  {% elif lane == 'lane10' %}
    #SAFE_UNLOAD_FILAMENT2
   # CUT_FILAMENT2

  {% elif lane == 'lane11' %}
    #SAFE_UNLOAD_FILAMENT2
   # CUT_FILAMENT2    
    
  {% else %}
    {% set msg = "Invalid lane/tool in AFC: " ~ lane %}
    M117 {msg}
    RESPOND PREFIX=AFC1 MSG="{msg}"
  {% endif %}



[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    # If QGL is not applied, first run a course calibration
    {% if printer.quad_gantry_level.applied == False %}
        _QUAD_GANTRY_LEVEL RETRY_TOLERANCE=1.0
    {% endif %}
    # then perform fine QGL down to desired spec
    # this has to be a separate macro call so the results of the above call will be visible!
    _FINE_QUAD_GANTRY_LEVEL

[gcode_macro _FINE_QUAD_GANTRY_LEVEL]
gcode:
    {% if printer.quad_gantry_level.applied == True %}
        # go for full quality at reduced probing height
        _QUAD_GANTRY_LEVEL HORIZONTAL_MOVE_Z=1.0  # <- set your preferred probing height here!
    {% else %}
        # This should never happen, just perform the full calibration using the defaults
        {action_respond_info("Fine QGL called without calling course QGL first!")}
        _QUAD_GANTRY_LEVEL  # default behavior, no speedup
    {% endif %}