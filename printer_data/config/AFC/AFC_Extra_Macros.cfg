[gcode_macro CARTO_CALIBRATE_TOOL_Z]
description: Macro to calibrate Z offsets for all tools using the cartographer touch probe.
gcode:
    {% if printer.toolhead.homed_axes != 'xyz' %}
        RESPOND TYPE=command MSG="Please home the printer before running this macro."
    {% else %}
        RESPOND TYPE=command MSG="Select tool 0 for touch home"
        SELECT_TOOL T=0
        RESPOND TYPE=command MSG="Heating tool to 147C"
        M109 S147

        RESPOND TYPE=command MSG="Calibrating Z offsets for all tools"
        _CARTO_CALIBRATE_TOOL_OFFSET
    {% endif %}

[gcode_macro _CARTO_CALIBRATE_TOOL_OFFSET]
gcode:
  {% set tools = printer.toolchanger.tool_numbers %}
  SET_GCODE_VARIABLE MACRO=_CARTO_CALIBRATE_TOOL_EVALUATE VARIABLE=z_results VALUE="[]"
  RESPOND TYPE=command MSG="Calibrating Z offsets for tools"

  {% for tool in tools %}
      RESPOND TYPE=command MSG="Starting calibration for tool {tool}"
      M104 T{tool} S147
      SELECT_TOOL T={tool}
      M109 S147
      AFC_BRUSH
      _MOVE_TO_CENTER
      CARTOGRAPHER_TOUCH_HOME
      M104 S0
      SET_GCODE_VARIABLE MACRO=_CARTO_CALIBRATE_TOOL_OFFSET_SAVE VARIABLE=cur_tool VALUE={tool}
      _CARTO_CALIBRATE_TOOL_OFFSET_SAVE
  {% endfor %}

  _CARTO_CALIBRATE_TOOL_EVALUATE

[gcode_macro _CARTO_CALIBRATE_TOOL_OFFSET_SAVE]
variable_cur_tool: 0
gcode:
  {% set z_result = printer.cartographer.touch.last_z_result %}
  {% if z_result is not none %}
    {% set adjusted_value = (z_result)|round(4) %}
    {% set result_line = "T" ~ cur_tool|string ~ " gcode_z_offset: " ~ adjusted_value|string %}
    {% set existing = printer["gcode_macro _CARTO_CALIBRATE_TOOL_EVALUATE"].z_results %}
    {% set updated = existing + [result_line] %}
    SET_GCODE_VARIABLE MACRO=_CARTO_CALIBRATE_TOOL_EVALUATE VARIABLE=z_results VALUE="{updated}"
  {% else %}
    RESPOND TYPE=command MSG="Touch failed for tool {cur_tool}"
  {% endif %}

[gcode_macro _CARTO_CALIBRATE_TOOL_EVALUATE]
variable_z_results: []
gcode:
  RESPOND TYPE=command MSG="Z-offsets from Carto using an offset of 0 from absolute zero"
  {% for line in z_results %}
    RESPOND TYPE=command MSG="{line}"
    G4 P1500
  {% endfor %}

[gcode_shell_command reset_scanner]
command: bash -c 'XDG_RUNTIME_DIR=/run/user/$(id -u) systemctl --user restart usb-qr-scanner'
timeout: 5.
verbose: True

[gcode_macro RESET_SCANNER]
gcode:
    RUN_SHELL_COMMAND CMD=reset_scanner


[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set TARGET_TEMP = printer.heater_bed.target %}
    M140 S0
    _BED_MESH_CALIBRATE {rawparams}
    M140 S{TARGET_TEMP}

[delayed_gcode Scanner_Reset]
initial_duration: 1
gcode:
 RESET_SCANNER


[gcode_macro _MOVE_TO_CENTER]
gcode:
  {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
  {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  G90 ; absolute mode
  G0 X{max_x//2} Y{max_y//2} F12000



[delayed_gcode init_filament_leds]
initial_duration: 1.0
gcode:
    {% set t4 = printer["filament_switch_sensor extruder_in1"].filament_detected %}
    {% set t5 = printer["filament_switch_sensor extruder_in2"].filament_detected %}
    {% if t4 %}
        SET_LED LED=AFC_Sndicator INDEX=1 RED=0 GREEN=1 BLUE=0   # filament present → green
    {% else %}
        SET_LED LED=AFC_Sndicator INDEX=1 RED=1 GREEN=0 BLUE=0   # no filament → red
    {% endif %}
    {% if t5 %}
        SET_LED LED=AFC_Tndicator INDEX=1 RED=0 GREEN=1 BLUE=0
    {% else %}
        SET_LED LED=AFC_Tndicator INDEX=1 RED=1 GREEN=0 BLUE=0
    {% endif %}






[axiscope]
pin: PB15                # Endstop pin
zswitch_x_pos: 329.3     # REQUIRED - X position of the endstop switch
zswitch_y_pos: -9.0     # REQUIRED - Y position of the endstop switch
zswitch_z_pos: 3.8        # REQUIRED - Z position + some clearance of the endstop switch
lift_z: 2                 # OPTIONAL - Amount to lift Z before moving (default: 1)
move_speed: 60            # OPTIONAL - XY movement speed in mm/s (default: 60)
z_move_speed: 10          # OPTIONAL - Z movement speed in mm/s (default: 10)
start_gcode: M118 Starting calibration G28 -> QGL -> G28Z
             G28
             QUAD_GANTRY_LEVEL
             G28 Z
             G0 X175 Y175 Z30 F3000   # Move to center @ focal length of camera Z=30
before_pickup_gcode: M118 Something Could be Done here
after_pickup_gcode: M118 NozzleScrub
                    M109 S150
                    #CLEAN_NOZZLE
                    AFC_BRUSH
                    G0 X175 Y175 Z30
finish_gcode: M118 Calibration complete
              T0






# [gcode_macro _TOOLCHANGER_VARS]
# variable_fan_speed: 255
# gcode:

# [gcode_macro _TOOL_DROPOFF]
# gcode:
#   {% set tn = params.TN|string %}
#   {% set tool = printer['tool ' + tn] %}
#   {% set x = tool.params_park_x|float %} 
#   {% set y = tool.params_park_y|float %} 
#   {% set z = tool.params_park_z|float %}
#   {% set safe_y = tool.params_safe_y|float %}
#   {% set fast = tool.params_fast_speed|float %}
#   {% set path = tool['params_dock_' + tool.params_dock_type + '_path'] + [{'f':0.5}] + tool['params_changer_' + tool.params_changer_type + '_path'] %}
#   {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
#   {% set cur_z = printer.toolhead.position[2]|float %}
#   G90
#   ; Move 1 mm up to avoid crashing into things
#   G0 Z{ [cur_z+1.0, max_z]|min } F{fast}    
#   #   ##############  Move up to the dock  ##############    
#   ROUNDED_G0 Y={safe_y} D=20 F={fast}
#   ROUNDED_G0 X={x} D=150 F={fast}
#   ROUNDED_G0 Z={z + path[0].get('z', 0)|float} D=20 F={fast}
#   ROUNDED_G0 Y={y + path[0].get('y', 0)|float} X={x + path[0].get('x', 0)|float} D=0 F={fast}
#   STOP_TOOL_PROBE_CRASH_DETECTION
#   #  ############## Run the path ##############
#   {% for pos in path %}
#     G0 Y{y + pos.get('y', 0)|float} X{x + pos.get('x', 0)|float} Z{z + pos.get('z', 0)|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) }
#   {% endfor %}
#   SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_VARS VARIABLE=fan_speed VALUE={ printer[tool.fan].speed * 255|default(0)|int }
#   M106 S0 T{tn}
  
#    ## Return to safe Y if no pickup_tool
#     {% if pickup_tool is none %}
#       G0 Y{tool.params_safe_y} F{fast}
#     {% endif %}


[gcode_macro AFC_PARK]
;rename_existing: AFC_PARK1
gcode:
  UNSELECT_TOOL
  

[gcode_macro LOAD_NOZZLE]

gcode:
  {% set lane = printer['AFC'].current_load %}

  {% if lane in ['lane0', 'lane1', 'lane2', 'lane3'] %}
    AFC_POOP
    AFC_KICK
  
  {% else %}
    {% set msg = "Lane loaded from AMS " ~ lane %}
    M117 {msg}
    RESPOND PREFIX=AFC MSG="{msg}"
  {% endif %}

[gcode_macro AFC_MAP_RESET]
gcode:
 RESET_AFC_MAPPING

[gcode_macro SHOW_LATEST_SHAPER_PLOT]
description: Find latest shaper CSV (X/Y), render plot(s), and post clickable previews
variable_settings: {
        'max_px':    400,
        'python':    '', # ~/klippy-env/bin/python3
        'script':    '~/klipper/scripts/calibrate_shaper.py',
        'save_path': '~/printer_data/config/toolchanger/ShaperManagement/shaper_img',
        'prefix':    'shaper_plot_',
        'axis':      'XY'

    }
gcode:
    {% for p in params if p|lower in settings %}
        {% set _ = settings.update({p|lower: params[p]|int(params[p])}) %}
    {% endfor %}

    {% set gbl     = printer.printer.__class__.__init__.__globals__ %}
    {% set imp_mod = gbl.importlib.import_module %}
    {% set sp      = imp_mod('subprocess') %}
    {% set bi      = imp_mod('builtins') %}
    {% set os      = imp_mod('os') %}
    {% set glob    = imp_mod('glob') %}
    {% set time    = imp_mod('time') %}
    {% set b64     = imp_mod('base64') %}
    {% set sys     = imp_mod('sys') %}

    {% set expand = os.path.expanduser %}
    {% set py_cfg = settings.python %}
    {% set py     = expand(py_cfg) if py_cfg else '' %}
    {% set script = expand(settings.script) %}
    {% if not py or not os.path.exists(py) %}
        {% set py = sys.executable if os.path.exists(sys.executable) else '/usr/bin/python3' %}
    {% endif %}

    {%- macro newest_csv_for_axis(ax) -%}
        {%- set pats = {
            'X': ['/tmp/resonances_x_*.csv','/tmp/shaper*_x_*.csv','/tmp/calibration_data_x_*.csv'],
            'Y': ['/tmp/resonances_y_*.csv','/tmp/shaper*_y_*.csv','/tmp/calibration_data_y_*.csv']
        } -%}
        {%- set files = [] -%}
        {%- for pat in pats[ax] -%}
            {%- for f in glob.glob(pat) -%}
                {%- set _ = files.append(f) -%}
            {%- endfor -%}
        {%- endfor -%}
        { bi.max(files, key=os.path.getmtime) if files|length > 0 else '' }
    {%- endmacro -%}

    {%- macro plot_tmp_path(ax) -%}
        {%- set csv = newest_csv_for_axis(ax) -%}
        {%- if csv -%}
            {%- set ts  = time.strftime('%Y-%m-%d_%H-%M-%S') -%}
            {%- set out = '/tmp/shaper_plot_' ~ ax ~ '_' ~ ts ~ '.png' -%}
            {%- set cmd = [py, script, csv, '-o', out] -%}
            {%- set res = sp.run(cmd, stdout=sp.PIPE, stderr=sp.PIPE) -%}
            {%- set rc  = res.returncode|int -%}
            { out if rc == 0 and os.path.exists(out) else '' }
        {%- endif -%}
    {%- endmacro -%}

    {%- macro save_plot(tmp_path, ax, save_dir, prefix) -%}
        {%- if tmp_path and save_dir -%}
            {%- set sdir     = os.path.expanduser(save_dir) -%}
            {%- set _        = os.makedirs(sdir, 511, True) if not os.path.exists(sdir) -%}
            {%- set ts       = time.strftime('%Y-%m-%d_%H-%M') -%}
            {%- set base     = prefix ~ '_' ~ ax ~ '_' ~ ts ~ '.png' -%}
            {%- set dst      = os.path.join(sdir, base) -%}
            {%- set buf      = bi.open(tmp_path, 'rb').read() -%}
            {%- set b_write  = bi.open(dst, 'wb').write(buf) -%}
            { dst }
        {%- endif -%}
    {%- endmacro -%}

    {%- macro send_plot(tmp_path, title, max_px) -%}
        {%- if not tmp_path -%}
            { '<div style="font-family:monospace">No plot rendered.</div>' }
        {%- else -%}
            {%- set data = bi.open(tmp_path, 'rb').read() -%}
            {%- set enc  = b64.b64encode(data) -%}
            {%- set uri  = 'data:image/png;base64,' ~ enc.decode('ascii') -%}
            { img_click_open(uri, max_px, title) }
        {%- endif -%}
    {%- endmacro -%}

    {%- macro axis_block(ax) -%}
        {%- set tmp = plot_tmp_path(ax) -%}
        {%- if not tmp -%}
            { 'No ' ~ ax ~ '-axis CSV found in /tmp or render failed.' }
        {%- else -%}
            {%- set saved = save_plot(tmp, ax, settings.save_path, settings.prefix) -%}
            {%- set html  = send_plot(tmp, ax ~ '-axis shaper plot', settings.max_px) -%}
            {%- if saved -%}
                { html ~ '<div style="font-family:monospace;font-size:11px;opacity:0.85;margin-top:4px">Saved: ' ~ saved ~ '</div>' }
            {%- else -%}
                { html }
            {%- endif -%}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro img_click_open(src, max_px=400, title='Click to open full-size') -%}
        {%- set js %}{% raw %}
        (function(img){
        try{
            var box = img.closest('.svg_click_open'); if (!box){ img.remove(); return; }
            if (box.dataset && box.dataset.bound){ img.remove(); return; }
            box.dataset.bound = '1';
            var theme = box.closest('.theme--dark') || document.body;
            function copyAllCustomProps(fromEl,toEl){
                try{
                    var cs = getComputedStyle(fromEl);
                    for (var i=0;i<cs.length;i++){
                        var name = cs[i];
                        if (name && name.indexOf('--')===0){
                            var v = cs.getPropertyValue(name);
                            if (v){ toEl.style.setProperty(name, v.trim()); }
                        }
                    }
                }catch(e){}
            }
            box.addEventListener('click', function(){
            try{
                var pic = box.querySelector('img[data-main]'); if (!pic) return;
                var natW = pic.naturalWidth || pic.width || 1000;
                var natH = pic.naturalHeight || pic.height || 1000;
                var s = document.createElementNS('http://www.w3.org/2000/svg','svg');
                s.setAttribute('viewBox','0 0 '+natW+' '+natH);
                s.setAttribute('preserveAspectRatio','xMidYMid meet');
                s.setAttribute('style','display:block;width:100%;height:100%');
                var im = document.createElementNS('http://www.w3.org/2000/svg','image');
                im.setAttributeNS('http://www.w3.org/1999/xlink','href', pic.src);
                im.setAttribute('x','0'); im.setAttribute('y','0');
                im.setAttribute('width',String(natW)); im.setAttribute('height',String(natH));
                s.appendChild(im);
                var panel = document.createElement('div');
                panel.setAttribute('style','position:absolute;left:0;top:0;display:flex;align-items:center;justify-content:center;transform-origin:0 0;cursor:auto;');
                copyAllCustomProps(theme, panel);
                panel.appendChild(s);
                var ov = document.createElement('div');
                ov.setAttribute('style','position:fixed;left:0;top:0;right:0;bottom:0;background:transparent;overflow:hidden;z-index:99999;cursor:zoom-out;');
                copyAllCustomProps(theme, ov);
                function fitScale(){var w=window.innerWidth,h=window.innerHeight;var k=Math.min(w*0.95/natW,h*0.95/natH);if(!(k>0))k=1;return k;}
                var k=fitScale(); var tx=Math.floor((window.innerWidth-natW*k)/2); var ty=Math.floor((window.innerHeight-natH*k)/2);
                function apply(){panel.style.transform='translate('+tx+'px,'+ty+'px) scale('+k+')'; panel.style.width=natW+'px'; panel.style.height=natH+'px';}
                apply();
                var dragging=false,lastX=0,lastY=0;
                panel.addEventListener('mousedown',function(ev){try{if(ev.button===0){dragging=true;lastX=ev.clientX;lastY=ev.clientY;panel.style.cursor='grabbing';ev.preventDefault();}}catch(e){}});
                window.addEventListener('mouseup',function(){try{if(dragging){dragging=false;panel.style.cursor='auto';}}catch(e){}});
                window.addEventListener('mousemove',function(ev){try{if(!dragging)return;var dx=ev.clientX-lastX,dy=ev.clientY-lastY;lastX=ev.clientX;lastY=ev.clientY;tx+=dx;ty+=dy;apply();}catch(e){}});
                s.addEventListener('wheel',function(ev){try{ev.preventDefault();var rect=panel.getBoundingClientRect();var mx=ev.clientX,my=ev.clientY;var u=(mx-rect.left)/k;var v=(my-rect.top)/k;var step=ev.ctrlKey?0.15:0.08;var factor=ev.deltaY>0?(1+step):(1-step);if(!(factor>0))factor=1;var k2=Math.max(k*factor,0.01);var tx2=Math.round(mx-u*k2);var ty2=Math.round(my-v*k2);k=k2;tx=tx2;ty=ty2;apply();}catch(e){}},{passive:false});
                function onResize(){try{var mx=window.innerWidth/2,my=window.innerHeight/2;var rect=panel.getBoundingClientRect();var u=(mx-rect.left)/k;var v=(my-rect.top)/k;var k2=fitScale();var tx2=Math.round(mx-u*k2);var ty2=Math.round(my-v*k2);k=k2;tx=tx2;ty=ty2;apply();}catch(e){}}
                function onKey(e){ if(e&&e.key==='Escape') close(); }
                function close(){window.removeEventListener('resize',onResize);document.removeEventListener('keydown',onKey);if(ov.parentNode)ov.parentNode.removeChild(ov);}
                ov.addEventListener('click',function(){ close(); });
                panel.addEventListener('click',function(e){ e.stopPropagation(); });
                window.addEventListener('resize',onResize);
                document.addEventListener('keydown',onKey);
                ov.appendChild(panel);
                theme.appendChild(ov);
            }catch(e){}});
        }catch(e){} finally{ img.remove(); }
        })(this)
        {% endraw %}{%- endset -%}
        {-
        '<div class="svg_click_open" title="' ~ title ~ '" ' ~
        'style="max-inline-size:' ~ max_px ~ 'px; max-block-size:' ~ max_px ~ 'px; inline-size:100%; background:transparent; cursor:zoom-in;">' ~
          '<div class="img_box" style="inline-size:100%; aspect-ratio:1/1; display:flex; align-items:center; justify-content:center; background:var(--p-background-darker);">' ~
            '<img data-main src="' ~ src ~ '" alt="shaper plot" ' ~
              'style="display:block; inline-size:100%; block-size:100%; object-fit:contain;" ' ~
              'onload="(function(img){try{var box=img.closest(\'.img_box\'); if(!box) return; var w=img.naturalWidth||img.width||0; var h=img.naturalHeight||img.height||0; if(w>0&&h>0){ box.style.aspectRatio = w+\' / \'+h; }}catch(e){}})(this)">' ~
          '</div>' ~
          '<img src=x style="display:none" onerror="' ~ js|replace('\n','') ~ '">' ~
        '</div>'
        -}
    {%- endmacro -%}

    {% set axes = (settings.axis|string).strip()|upper %}

    {% set parts = [ 
        '<div style="margin-block:0.4em"><b>Latest shaper plots (' ~ axes ~ ')</b></div>',
        '<div style="display:grid;grid-template-columns:1fr;gap:12px">' 
    ] %}
    {% for axis in axes %}
        {% set _ = parts.append('<div>' ~ axis_block(axis) ~ '</div>') %}
    {% endfor %}
    {% set _ = parts.append('</div>') %}

    { action_respond_info(parts|join|replace('\n','')) }




