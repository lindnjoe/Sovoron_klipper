[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set TARGET_TEMP = printer.heater_bed.target %}
    M140 S0
    _BED_MESH_CALIBRATE {rawparams}
    M140 S{TARGET_TEMP}



[gcode_macro _MOVE_TO_CENTER]
gcode:
  {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
  {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  G90 ; absolute mode
  G0 X{max_x//2} Y{max_y//2} F12000

[gcode_macro CARTO_CALIBRATE_TOOL_Z]
description: Macro to calibrate Z offsets for all tools using the cartographer touch probe.
gcode:
    {% if printer.toolhead.homed_axes != 'xyz' %}
        RESPOND TYPE=command MSG="Please home the printer before running this macro."
    {% else %}
        RESPOND TYPE=command MSG="Select tool 0 for touch home"
        SELECT_TOOL T=0
        RESPOND TYPE=command MSG="Heating tool to 150C"
        M109 S150

        RESPOND TYPE=command MSG="Calibrating Z offsets for all tools"
        _CARTO_CALIBRATE_TOOL_OFFSET
    {% endif %}

[gcode_macro _CARTO_CALIBRATE_TOOL_OFFSET]
gcode:
  {% set tools = printer.toolchanger.tool_numbers %}
  SET_GCODE_VARIABLE MACRO=_CARTO_CALIBRATE_TOOL_EVALUATE VARIABLE=z_results VALUE="''"
  RESPOND TYPE=command MSG="Calibrating Z offsets for tools"

  {% for tool in tools %}
      RESPOND TYPE=command MSG="Starting calibration for tool {tool}"
      M104 T{tool} S150
      SELECT_TOOL T={tool}
      M109 S150
      _MOVE_TO_CENTER
      CARTOGRAPHER_TOUCH
      M104 S0
      SET_GCODE_VARIABLE MACRO=_CARTO_CALIBRATE_TOOL_OFFSET_SAVE VARIABLE=cur_tool VALUE={tool}
      _CARTO_CALIBRATE_TOOL_OFFSET_SAVE
  {% endfor %}

  _CARTO_CALIBRATE_TOOL_EVALUATE

[gcode_macro _CARTO_CALIBRATE_TOOL_OFFSET_SAVE]
variable_cur_tool: 0
gcode:
  {% set z_result = printer.scanner.touch.last_z_result %}
  {% if z_result is not none %}
    {% set adjusted_result = z_result + 0.02 %}
    {% set result = "T" ~ cur_tool|string ~ " gcode_z_offset: " ~ (adjusted_result|round(4)) %}

    {% set prev = printer["gcode_macro _CARTO_CALIBRATE_TOOL_EVALUATE"].z_results %}
    {% set clean_prev = prev.strip("'") %}
    {% set new_full = (clean_prev + "\\n" + result).strip() %}
    SET_GCODE_VARIABLE MACRO=_CARTO_CALIBRATE_TOOL_EVALUATE VARIABLE=z_results VALUE="'{ new_full }'"
  {% else %}
    RESPOND TYPE=command MSG="Touch failed for tool {cur_tool}"
  {% endif %}

[gcode_macro _CARTO_CALIBRATE_TOOL_EVALUATE]
variable_z_results: ''
gcode:
  RESPOND TYPE=command MSG="Z-offsets from Carto using an offset of 0.02 from absolute zero"
  {% for line in z_results.strip().split('\n') if line %}
    RESPOND TYPE=command MSG="{line}"
    G4 P1500
  {% endfor %}

[delayed_gcode init_filament_leds]
initial_duration: 1.0
gcode:
    {% set t4 = printer["filament_switch_sensor extruder_in1"].filament_detected %}
    {% set t5 = printer["filament_switch_sensor extruder_in2"].filament_detected %}
    {% if t4 %}
        SET_LED LED=AFC_Sndicator INDEX=1 RED=0 GREEN=1 BLUE=0   # filament present → green
    {% else %}
        SET_LED LED=AFC_Sndicator INDEX=1 RED=1 GREEN=0 BLUE=0   # no filament → red
    {% endif %}
    {% if t5 %}
        SET_LED LED=AFC_Tndicator INDEX=1 RED=0 GREEN=1 BLUE=0
    {% else %}
        SET_LED LED=AFC_Tndicator INDEX=1 RED=1 GREEN=0 BLUE=0
    {% endif %}



[gcode_macro HEAT_SOAK_BED]
description: "Heat soak the bed at 65C for 5 minutes"
variable_soak_active: 0
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(65)|float %}
    {% set SOAK_TIME = params.SOAK_TIME|default(300)|int %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK_BED VARIABLE=soak_active VALUE=1
    M140 S{BED_TEMP}
    M190 S{BED_TEMP}
    RESPOND TYPE=command MSG="action:prompt_begin Heat soaking bed for {SOAK_TIME // 60}m"
    RESPOND TYPE=command MSG="action:prompt_button Skip|SKIP_HEAT_SOAK"
    RESPOND TYPE=command MSG="action:prompt_show"
    UPDATE_DELAYED_GCODE ID=END_HEAT_SOAK DURATION={SOAK_TIME}
    PAUSE

[delayed_gcode END_HEAT_SOAK]
initial_duration: 0
gcode:
    {% if printer["gcode_macro HEAT_SOAK_BED"].soak_active %}
        RESPOND TYPE=command MSG="action:prompt_end"
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK_BED VARIABLE=soak_active VALUE=0
        RESUME
        RESPOND MSG="Heat soak complete"
    {% endif %}
    UPDATE_DELAYED_GCODE ID=END_HEAT_SOAK DURATION=0

[gcode_macro SKIP_HEAT_SOAK]
gcode:
    RESPOND TYPE=command MSG="action:prompt_end"
    UPDATE_DELAYED_GCODE ID=END_HEAT_SOAK DURATION=0
    {% if printer.print_stats.state != "printing" %}
        M140 S0
    {% endif %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK_BED VARIABLE=soak_active VALUE=0
    RESUME
    RESPOND MSG="Heat soak skipped"

[gcode_macro WAIT_HEAT_SOAK]
description: "Run heat soak if bed below threshold"
variable_threshold_temp: 55 # in °C
gcode:
    {% set threshold = threshold_temp|float %}
    {% if printer.heater_bed.temperature < threshold %}
        HEAT_SOAK_BED
    {% else %}
        RESPOND MSG="skipping heat soak... ({ printer.heater_bed.temperature } > { threshold })"
    {% endif %}



[axiscope]
pin: PB15                # Endstop pin
zswitch_x_pos: 329.3     # REQUIRED - X position of the endstop switch
zswitch_y_pos: -9.0     # REQUIRED - Y position of the endstop switch
zswitch_z_pos: 3.8        # REQUIRED - Z position + some clearance of the endstop switch
lift_z: 2                 # OPTIONAL - Amount to lift Z before moving (default: 1)
move_speed: 60            # OPTIONAL - XY movement speed in mm/s (default: 60)
z_move_speed: 10          # OPTIONAL - Z movement speed in mm/s (default: 10)
start_gcode: M118 Starting calibration G28 -> QGL -> G28Z
             G28
             QUAD_GANTRY_LEVEL
             G28 Z
             G0 X175 Y175 Z30 F3000   # Move to center @ focal length of camera Z=30
before_pickup_gcode: M118 Something Could be Done here
after_pickup_gcode: M118 NozzleScrub
                    M109 S150
                    #CLEAN_NOZZLE
                    AFC_BRUSH
                    G0 X175 Y175 Z30
finish_gcode: M118 Calibration complete
              T0






# [gcode_macro _TOOLCHANGER_VARS]
# variable_fan_speed: 255
# gcode:

# [gcode_macro _TOOL_DROPOFF]
# gcode:
#   {% set tn = params.TN|string %}
#   {% set tool = printer['tool ' + tn] %}
#   {% set x = tool.params_park_x|float %} 
#   {% set y = tool.params_park_y|float %} 
#   {% set z = tool.params_park_z|float %}
#   {% set safe_y = tool.params_safe_y|float %}
#   {% set fast = tool.params_fast_speed|float %}
#   {% set path = tool['params_dock_' + tool.params_dock_type + '_path'] + [{'f':0.5}] + tool['params_changer_' + tool.params_changer_type + '_path'] %}
#   {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
#   {% set cur_z = printer.toolhead.position[2]|float %}
#   G90
#   ; Move 1 mm up to avoid crashing into things
#   G0 Z{ [cur_z+1.0, max_z]|min } F{fast}    
#   #   ##############  Move up to the dock  ##############    
#   ROUNDED_G0 Y={safe_y} D=20 F={fast}
#   ROUNDED_G0 X={x} D=150 F={fast}
#   ROUNDED_G0 Z={z + path[0].get('z', 0)|float} D=20 F={fast}
#   ROUNDED_G0 Y={y + path[0].get('y', 0)|float} X={x + path[0].get('x', 0)|float} D=0 F={fast}
#   STOP_TOOL_PROBE_CRASH_DETECTION
#   #  ############## Run the path ##############
#   {% for pos in path %}
#     G0 Y{y + pos.get('y', 0)|float} X{x + pos.get('x', 0)|float} Z{z + pos.get('z', 0)|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) }
#   {% endfor %}
#   SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_VARS VARIABLE=fan_speed VALUE={ printer[tool.fan].speed * 255|default(0)|int }
#   M106 S0 T{tn}
  
#    ## Return to safe Y if no pickup_tool
#     {% if pickup_tool is none %}
#       G0 Y{tool.params_safe_y} F{fast}
#     {% endif %}


[gcode_macro AFC_PARK]
;rename_existing: AFC_PARK1
gcode:
  UNSELECT_TOOL
  

[gcode_macro LOAD_NOZZLE]

gcode:
  {% set lane = printer['AFC'].current_load %}

  {% if lane in ['lane0', 'lane1', 'lane2', 'lane3'] %}
    AFC_POOP
    AFC_KICK
  
  {% else %}
    {% set msg = "Lane loaded from AMS " ~ lane %}
    M117 {msg}
    RESPOND PREFIX=AFC MSG="{msg}"
  {% endif %}

[gcode_macro AFC_MAP_RESET]
gcode:
 RESET_AFC_MAPPING






