[delayed_gcode _HEAT_SOAK_UPDATE]
gcode:
    UPDATE_DELAYED_GCODE ID=_HEAT_SOAK_UPDATE DURATION=0
    {% if printer['gcode_macro PRINT_START'].state %}
        PRINT_START TICK_UPDATE=1
    {% endif %}

[gcode_macro PRINT_START]
variable_soak_settings: {
        'enabled':                 True,    # <- change if dont want
        'min_temp_to_trigger':     46,      # Skip soak for prints with bed temp lower then this
        'min_duration_to_trigger': 30,      # Skip soak for prints shorter than this
        'soak_seconds_per_minute': 5,       # Seconds to soak for each minute of estimated print time.

        'skip_if_chamber_within' : 10,      # skips if chamber is already within X°C of target from slicer (name your sensor 'chamber')

        'soak_time': {      'min': 5,       # minutes defining upper and lower heat soaking time to clamp to
                            'max': 45,
        },
        
    }
variable_state: {}
gcode: 
    #{% import toolchanger_helper as tch with context %}

    {% set BUTS      = {'play': ('[ ▶ ]', 'success'), 'stop': ('[ ⏹ ]', 'error')} %} 
    {% set COLS      = ['accent--text text--darken-3', 'accent--text text--lighten-3'] %}

    {% set SELF      = 'PRINT_START' %}
    {% set SS        = soak_settings %}
    {% set th        = printer.toolhead %}
    {% set p_stats   = printer.print_stats %}
    {% set t_idled   = p_stats.total_duration  %}
    {% set t_now     = th.estimated_print_time %}
    {% set remaining = state.get('time_to_soak', 0.0) - t_idled %}

    {% set state = {} if 'TOOL' in params else state %} # hard reset. new print.

    # ╭───────────────────────────────────────────────── Helpers ─────────────────────────────────────────────────╮
    {%- macro ui(msg)  -%}          { action_respond_info('action:prompt_' ~ msg) }                  {%- endmacro -%}
    {%- macro add(msg) -%}          { ui(msg) } { ui('show') }                                       {%- endmacro -%}
    {%- macro center_but_val(label) -%} 
        { (('＋' ~ label if label > 0 else '−' ~ label|string|replace('-', '')) ~ ' 𝗆𝗂𝗇').center(7, '⠀') }
    {%- endmacro -%}
    {%- macro sign(val) -%}         { val / (val|abs) }                                              {%- endmacro -%}

    {%- macro clamp(val) -%}        
        { [ [ SS.soak_time.min * 60.0, val|float(0) ]|max, SS.soak_time.max * 60.0 ]|min } 
    {%- endmacro -%}

    {%- macro format_time(sec) -%}
        {%- set ns = namespace(remain = sec|int(-1)) -%}                               
        {%- set units, parts = [ ('days', 86400), ('hours', 3600), ('minutes', 60), ('seconds', 1) ], [] -%}
        {%- for label, size in units -%}
            {% set val = ns.remain // size %}
            {%- if val or (size == 1 and not parts) -%}
                {%- set _ = parts.append(val ~ ' ' ~ (label if val > 1 else label.rstrip('s'))) -%}
            {%- endif -%}
            {%- set ns.remain = ns.remain % size -%}
        {%- endfor -%}
        {%- if parts|length > 1 -%}
            {%- set last = parts.pop() -%}
            { parts|join(' ') ~ ' and ' ~ last }
        {%- else -%}
            { parts|first|default('-1s')}
        {%- endif -%}
    {%- endmacro -%}

    {%- macro get_duration_from_name(fname) -%}
        {%- set units   = {'d': 86400, 'h': 3600, 'm': 60, 's': 1} -%}
        {%- set ns      = namespace(best = none, fallback = none) -%}
        {%- set groups  = (fname.rstrip('.gcode')|replace('-', '_')|replace('.', '_')).split('_')|reverse -%}
        {%- for g in groups if ns.best is none and g and g[0].isdigit() -%}
            {%- set parts = (g|replace('d',' d ')|replace('h',' h ')|replace('m',' m ')|replace('s',' s ')|trim).split() -%}
            {%- set ok    = namespace(v = (parts|length is even)) -%}
            {%- if ok.v -%}
                {%- set pairs, seen = parts|batch(2), [] -%} # always pairs -> day/hour...hour/minute...
                {%- set tot   = namespace(sec = 0) -%}
                {%- for p in pairs -%} # for num, u in pairs
                    {%- set num, u = p[0], p[1] -%}
                    {%- if not num.isdigit() or u not in units or u in seen -%}
                        {%- set ok.v = False -%}
                    {%- else -%}
                        {%- set _        = seen.append(u) -%}
                        {%- set tot.sec = tot.sec + (num|int * units[u]) -%}
                    {%- endif -%}
                {%- endfor -%}
            {%- endif -%}
            {%- if ok.v -%}
                {%- if seen|length == 1 and 's' in seen and ns.fallback is none -%}
                    {%- set ns.fallback = tot.sec -%}
                {%- else -%}
                    {%- set ns.best = tot.sec -%}
                {%- endif -%}
            {%- endif -%}
        {%- endfor -%}
        { ns.best if ns.best is not none else ns.fallback|default(-1) }
    {%- endmacro -%}

    {%- macro polygon_area(poly) -%}
        {%- set n  = poly|length -%}
        {%- set ns = namespace(acc=0) -%}
        {%- for point in poly -%}
            {%- set j        = (loop.index0 + 1) % n -%}
            {%- set x1, y1   = point[0],   point[1] -%}
            {%- set x2, y2   = poly[j][0], poly[j][1] -%}
            {%- set ns.acc   = ns.acc + (x1 * y2 - x2 * y1) -%}
        {%- endfor -%}
        {(ns.acc/2.0)|abs}
    {%- endmacro -%}

    {%- macro max_polygon_area(objs, areas = []) -%}
        {%- for p in objs|map(attribute='polygon') -%} {% set _ = areas.append(polygon_area(p)) %} {% endfor %}
        {areas|map('float')|list|max}
    {%- endmacro -%}

    {%- macro get_chamber_target() -%}
        {%- set chamber_target = params.get('CHAMBER_TEMP', state.get('params', {}).get('CHAMBER_TEMP', None)) -%}
        {- chamber_target if chamber_target is not none else '' -}
    {%- endmacro -%}

    {%- macro get_chamber_temp() -%}
        {%- set temp = [] -%}
        {%- for heater in printer.heaters.available_sensors  if (heater|lower).endswith('chamber') and not temp -%}
            {%- set _ = temp.append(printer[heater].temperature) -%}
        {%- endfor -%}
        {- temp[0] if temp|length else '' -}
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭────────────────────────────────────────── Reset and start print ──────────────────────────────────────────╮
    {%- macro _resume_and_print() -%}
        UPDATE_DELAYED_GCODE ID=_HEAT_SOAK_UPDATE DURATION=0
        M107
        RESTORE_GCODE_STATE NAME=PAUSE_STATE MOVE=0 # restore with move 0 (RESUME always restores with 1...)
        SAVE_GCODE_STATE NAME=PAUSE_STATE # save it again so it doesnt error...
        RESUME_BASE
        _PRINT_START {state.params|xmlattr}
        # ---< preserve print history
        {% set _, state = state.pop('params', None), {} %}
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭─────────────────────────────────────────────── Open Popup ───────────────────────────────────────────────╮
    {%- macro _show_UI(soak_for) -%}    
        { ui('begin heat soaking for ' ~ p_stats.filename.split('_')[0]|default('next print')) }
        { ui('text upcoming print duration: ' ~ format_time(state.get('print_duration', -1)))}
        { ui('text heat soaking for: ' ~ format_time(soak_for))}
        { ui('text largest part area in this print: ' ~ (max_polygon_area(printer.exclude_object.objects)|float / 100)|int ~ 'cm²')}
        { ui('button_group_start') }
        {% for step in [15, 10, 5, -15, -10, -5] %}
            { ui('button ' ~ center_but_val(step) ~ '|' ~ SELF ~ ' ADJUST=' ~ step ~ '|' ~ COLS[-1 if step > 0 else 0]) }
        {% endfor %}
        { ui('button_group_end') }
        { ui('button_group_start') }
        { ui('button ' ~ BUTS.stop[0] ~ ' Cancel|' ~ SELF ~ ' CANCEL=1|' ~ BUTS.stop[1]) }
        { ui('button ' ~ BUTS.play[0] ~ ' Skip|'   ~ SELF ~ ' SKIP=1|'   ~ BUTS.play[1]) }
        { add('button_group_end') }
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭────────────────────────────────────────────── Update Popup ───────────────────────────────────────────────╮
    {%- macro _tick(seconds_left) -%}
        {%- set s = seconds_left|int -%}
        {%- if s <= 0 -%}
            { ui('end') }
            { _resume_and_print() }
        {%- else -%}
            {%- if s > 300 -%}      # more than 5 min -> update every 5 min
                {% set interval = 300 %}
            {%- elif s > 60 -%}     # 1–5 min -> update every 1 min
                {% set interval = 60 %}
            {%- elif s > 10 -%}     # 10–60 s -> update every 10 s
                {% if state and not state.get('reminded', False) %} 
                    { _show_UI(seconds_left) } 
                    {% set _ = state.update( {'reminded': True} ) %}
                {% endif %}
                {% set interval = 10  %}
            {%- else -%}
                {% set interval = 5   %}
            {%- endif -%}
            UPDATE_DELAYED_GCODE ID=_HEAT_SOAK_UPDATE DURATION={interval}
            { add('text ' ~ format_time(s) ~ ' remaining…') }
        {%- endif -%}
    {%- endmacro -%}
    # ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    # ╭───────────────────────────────────────── Two step initialization ─────────────────────────────────────────╮
    {% if 'params' not in state %}
        {% set print_duration = get_duration_from_name(p_stats.filename)|int %}
        {% set time_to_soak   = clamp(SS.soak_seconds_per_minute * (print_duration / 60.0))|float %}
        # ---< save to check later if we even need to.
        {% set _ = state.update({ 'params': params, 'time_to_soak': time_to_soak, 'print_duration': print_duration }) %}
        PAUSE_BASE
        UPDATE_DELAYED_GCODE ID=_HEAT_SOAK_UPDATE DURATION=0.1 
    {% endif %}

    {% if not state.get('initialized', False) and 'params' in state and not 'TOOL' in params %}
        {% set _ = state.update({ 'initialized': True }) %}
        {% set skip = state.get('print_duration', -1) < SS.min_duration_to_trigger %}
        {% set skip = soak_settings.min_temp_to_trigger > state.params.get('BED_TEMP', -1)|int(-1) or skip %}
        {% set skip = not soak_settings.enabled or skip %}
        {% if get_chamber_target() and get_chamber_temp() %}
            {% set skip = soak_settings.skip_if_chamber_within|abs > get_chamber_target()|float - get_chamber_temp()|float or skip %}
        {% endif %}
        {% if skip %} # <-- skip down here, cause we wanna record history to skip soak if two back to back
            { _resume_and_print() }
        {% else %}
            { _show_UI(state.get('time_to_soak', -1)) }
            #{ tch.check_ok() }
            HEATSOAK {state.params|xmlattr}
            PART_AREA
        {% endif %}
    {% endif %}
     # ╰───────────────────────────────────────────────────────────────────────────────────────────────────────────╯

    {% if 'ADJUST' in params %}
        {% set new_duration = clamp(state.get('time_to_soak', 0.0) + params.ADJUST|float(0.0) * 60.0)|float %}
        {% set _ = state.update( {'time_to_soak': new_duration, 'reminded': False} ) %}
        { _show_UI(new_duration) }
        { _tick(new_duration) }
    {% elif 'CANCEL' in params %}
        {% set state = {} %}
        { ui('end') }
        UPDATE_DELAYED_GCODE ID=_HEAT_SOAK_UPDATE DURATION=0
        CANCEL_PRINT
    {% elif 'SKIP' in params %}
        { ui('end') }
        { _resume_and_print() }
    {% elif 'TICK_UPDATE' in params and 'params' in state %}
        # {% if printer.print_stats.state|lower == printing %}
        {% if printer.pause_resume.is_paused %}
            { _tick(remaining) }
            {% set _ = state.update( {'time_to_soak': remaining} ) %}
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO={SELF} VARIABLE=state VALUE="{state}"

[gcode_macro _PRINT_START]
gcode:
  {% set TOOL_TEMP = params.TOOL_TEMP|default(147)|float %}
  {% set BED_TEMP = params.BED_TEMP|default(0)|float %}
  INITIALIZE_TOOLCHANGER
  STOP_TOOL_CRASH_DETECTION
  M190 S{ BED_TEMP }
  SET_GCODE_OFFSET Z=0 ; Reset Z offset
  M104 S147 T0
  G28
  #WAIT_HEAT_SOAK
  G90
  G32
  #_MOVE_TO_CENTER
  SELECT_TOOL T=0
  AFC_BRUSH
  CARTOGRAPHER_TOUCH_HOME
  BED_MESH_CALIBRATE ADAPTIVE=1
  M104 S0

  {% set requested = params.TOOL|int %}
  {% if requested in [0, 1, 2, 3] %}
    SELECT_TOOL T={requested}
  {% elif requested in [4, 6, 7, 8] %}
    SELECT_TOOL T=4
  {% elif requested in [5, 9, 10, 11] %}
    SELECT_TOOL T=5
  {% else %}
    RESPOND TYPE=error MSG="AFC_SELECT_TOOL: Unsupported tool index {requested}"
  {% endif %}
   T{params.TOOL}
   M400
   M109 S{TOOL_TEMP}
   {% set LastSetTemp = 0 %}
  {% for tool_nr in printer.toolchanger.tool_numbers %}
    {% set tooltemp_param = 'T' ~ tool_nr|string ~ '_TEMP' %}
    {% if tooltemp_param in params %}
      M104 T{tool_nr} S{params[tooltemp_param]}
      {% set LastSetTemp = params[tooltemp_param] %}
    {% endif %}
  {% endfor %}
   M400  
   PRIME_LINES INITIAL_TOOL={params.TOOL|default(0)|float}
   _TOOLCHANGER_PRINT_START_END

[gcode_macro AMS_START]
gcode:
  OAMSM_FOLLOWER ENABLE=1 DIRECTION=1 FPS=fps1
  OAMSM_FOLLOWER ENABLE=1 DIRECTION=1 FPS=fps2

[gcode_macro AMS_STOP]
gcode:
  OAMSM_FOLLOWER ENABLE=0 DIRECTION=1 FPS=fps1
  OAMSM_FOLLOWER ENABLE=0 DIRECTION=1 FPS=fps2

# [gcode_macro M104]
# rename_existing: M104.1
# description: [T<index>] [S<temperature>]
#   Set tool temperature.
#   T= Tool number, optional. If this parameter is not provided, the current tool is used.
#   S= Target temperature
# gcode:
#   {% if params.T is defined %}
#     {% set newparameters = "" %}
#     {% set newparameters = newparameters ~ " T="~params.T %}
#     {% if params.S is defined %}
#       {% set newparameters = newparameters ~ " TARGET="~params.S %}
#     {% endif %}
#     SET_TOOL_TEMPERATURE{newparameters}
#   {% else %}
#     M104.1 {rawparams}
#   {% endif %}

# [gcode_macro M109]
# rename_existing: M109.9999
# description: [T<index>] [S<temperature>] [D<Deadband>]
#   Set tool temperature and wait with deadband option.
#   T= Tool number [optional]. If this parameter is not provided, the current tool is used.
#   S= Target temperature
#   D= Dead-band, allows the temperature variance +/- the deadband
# gcode:
#   {% if params.T is defined %}
#     {% set newparameters = " T="~params.T %}
#   {% endif %}

#   {% if params.S is defined %}
#     {% set newparameters = newparameters~" S="~params.S %}
#   {% endif %}

#   {% if params.D is defined %}
#     {% set newparameters = newparameters~" D="~params.D %}
#   {% endif %}

#   SET_TEMPERATURE_WITH_DEADBAND {newparameters}


# [gcode_macro SET_TEMPERATURE_WITH_DEADBAND]
# description: [T<index>] [S<temperature>] [D<Deadband>]
#   Set tool temperature and wait.
#   T= Tool number [optional]. If this parameter is not provided, the current tool is used.
#   S= Target temperature
#   D= Dead-band, allows the temperature variance +/- the deadband
# variable_default_deadband: 10.0
# gcode:
#     {% set s = params.S|default(0)|int %}
#     {% set tn = params.T|default(printer.toolchanger.tool_number)|int %}
#     {% set d = params.D|default(default_deadband)|float %}
    
#     {% set tool = printer.toolchanger.tool_names[tn]|default('') %}
#     {% set extruder = printer[tool].extruder %}

#     SET_HEATER_TEMPERATURE HEATER={extruder} TARGET={s}
#     {% if s > 0 %}
#         RESPOND type=echo MSG='{"Waiting For Extruder with Deadband: "~d}'
#         TEMPERATURE_WAIT SENSOR={extruder} MINIMUM={s-(d/2)} MAXIMUM={s+(d/2)}   ; Wait for hotend temp (within D degrees)
#     {% endif %}
 
# [gcode_macro PRINT_START]
# gcode:
#     {% set TOOL = params.TOOL | default(-1)| int %}
#     {% set TOOL_TEMP = params.TOOL_TEMP | default(0) | int %}
#     {% set BED_TEMP = params.BED_TEMP | default(0) | int %}

#     STOP_CRASH_DETECTION
    
#     M117 Heating Bed
#     M190 S{BED_TEMP}
    
#     M117 Homing
#     G28
#     SELECT_TOOL T=0

#     M117 Quad Gantry Level
#     G32
#     # QUAD_GANTRY_LEVEL
#     # G28 Z
#     # {% if TOOL >= 0 %}
#     #     M104 T0 S0 ; shutdown T0.  If it's up first it will be heated below.
#     #     T{params.TOOL}
#     #     {% set initialToolTemp = 'T' ~ params.TOOL|string ~ '_TEMP' %}
#     #     M117 Waiting on T{params.TOOL} S{params[initialToolTemp]}C
#     #     M109 S{params[initialToolTemp]}
#     # {% else %}
#         M109 S{TOOL_TEMP}
#     # {% endif %}

  
    

#   # {% for tool_nr in printer.toolchanger.tool_numbers %}
#   #     {% set tooltemp_param = 'T' ~ tool_nr|string ~ '_TEMP' %}
#   #     {% if tooltemp_param in params %}
#   #       M104 T{tool_nr} S{params[tooltemp_param]}
#   #     {% endif %}
#   #   {% endfor %}

#   #    M117 Heating up the hotend
#   # G90 ; Absolute positioning
#   # G92 E0 ; Zero extruder
#   # M106 S100 ; Start part cooling fan, 255=100%
#   # G0 Z10 F3000
#   # _MOVE_TO_CENTER
#   # M109 S{ TOOL_TEMP }
   
#     LOAD_BED_MESH_PROFILE
#     START_CRASH_DETECTION
    


[gcode_macro LOAD_BED_MESH_PROFILE]
gcode:
    {% if printer['heater_bed'].temperature <= 70 %}
        BED_MESH_PROFILE LOAD=default  ; Load the default bed mesh profile if the bed temperature is 60°C or below
         M117 Bed Mesh default loaded
    {% elif printer['heater_bed'].temperature >= 99 %}
        BED_MESH_PROFILE LOAD=ABS      ; Load the ABS-specific bed mesh profile if the bed temperature is 100°C or higher
         M117 Bed Mesh ABS loaded
    {% else %}
        BED_MESH_PROFILE LOAD=hightemp ; Load the high-temp bed mesh profile if the bed temperature is between 61°C and 99°C
         M117 Bed Mesh hightemp loaded
    {% endif %}

[gcode_macro CLEAN_NOZZLE]
gcode:
    _TOOLCHANGER_CLEAN_NOZZLE

# [gcode_macro TOOLCHANGE_DEMO]
# description: [SAMPLES=<int>]
#   Run random tool changes.
#   SAMPLES= Number of changes to run, default is 20.
# gcode:
#     {% set t = params.SAMPLES|default(20)|int %}
#     {% for n in range(t) %}
#       T{ printer.toolchanger.tool_numbers | random }
#     {% endfor %}

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    QUAD_GANTRY_LEVEL
    G28 Z

[gcode_macro PRINT_STATUS]
gcode:
  {% set obj = params.OBJ %}
  RESPOND TYPE=echo MSG="Status for M190 {obj} is { printer[obj] }"

[gcode_macro UNSAFE_LOWER_TOOLHEAD]
description: Lower the bed 100mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=100
  G0 Z0 F6000
  M84

[gcode_macro UNSAFE_RAISE_TOOLHEAD]
description: Raise the bed 100mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=0
  G0 Z100 F6000
  M84

[gcode_macro LOAD_FILAMENT]
gcode:
  M117 Loading
  M109 S240
  G90 ; Absolute pos
  AFC_POOP
  AFC_KICK
  AFC_BRUSH
  _MOVE_TO_CENTER
  M104 S0

[gcode_macro UNLOAD_FILAMENT]
gcode:
  M117 Unloading
  M104 S240 ;Heat up the filament
  TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM=240
  M83                           ; set extruder to relative
  G1 E5 F500                   ; extrude 5 mm
  G1 E-50 F1000                   ; retract 5 cm
  G1 E-50 F1000                   ; retract 5 cm
  M82                            ; set extruder to absolute
  M400                          ; wait for buffer to clear
  TURN_OFF_HEATERS
  M117 Unloading done

[gcode_macro LOAD_ONE_FILAMENT]
gcode:
  M117 Loading {params.TOOL}
  M109 T{params.TOOL} S240 ;Wait until heated
  {% set start_extruder = printer.toolhead.extruder %}
  {% set tool_name = printer.toolchanger.tool_names[params.TOOL|int] %}
  {% set extruder = printer[tool_name].extruder %}
  M104 T{params.TOOL} S240 ;Heat up the filament
  TEMPERATURE_WAIT SENSOR={extruder} MINIMUM=240
  ACTIVATE_EXTRUDER EXTRUDER={extruder}
  M83                           ; set extruder to relative
  G1 E50 F300                   ; extrude 5 mm
  G1 E50 F300                   ; extrude 5 cm
  G1 E-4 F1800                   ; retract 4 cm
  M82                            ; set extruder to absolute
  M400                          ; wait for buffer to clear
  M104 S0
  ACTIVATE_EXTRUDER EXTRUDER={start_extruder}
  M117 Loading done

[gcode_macro UNLOAD_ONE_FILAMENT]
gcode:
  M117 Unloading {params.TOOL}
  M109 T{params.TOOL} S240 ;Wait until heated
  {% set start_extruder = printer.toolhead.extruder %}
  {% set tool_name = printer.toolchanger.tool_names[params.TOOL|int] %}
  {% set extruder = printer[tool_name].extruder %}
  M104 T{params.TOOL} S240 ;Heat up the filament
  TEMPERATURE_WAIT SENSOR={extruder} MINIMUM=240
  ACTIVATE_EXTRUDER EXTRUDER={extruder}
  M83                           ; set extruder to relative
  G1 E5 F500                   ; extrude 5 mm
  G1 E-50 F1000                   ; retract 5 cm
  G1 E-50 F1000                   ; retract 5 cm
  M82                            ; set extruder to absolute
  M400                          ; wait for buffer to clear
  TURN_OFF_HEATERS
  ACTIVATE_EXTRUDER EXTRUDER={start_extruder}
  M117 Unloading done

[gcode_macro UNLOAD_ALL_FILAMENT]
gcode:
  {% set start_extruder = printer.toolhead.extruder %}
  {% set tools = printer.toolchanger.tool_names %}
  M117 Unloading
  {% for tool in tools %}
    M104 T{printer[tool].tool_number} S240 ;Heat up the filament
  {% endfor %}
  {% for tool in tools %}
    M109 T{printer[tool].tool_number} S240 ;Wait until heated
    ACTIVATE_EXTRUDER EXTRUDER={printer[tool].extruder}
    M83                           ; set extruder to relative
    G1 E5 F500                     ; extrude 5 mm
    G1 E-50 F1000                   ; retract 5 cm
    G1 E-50 F1000                   ; retract 5 cm
  {% endfor %}
  M400                          ; Finish all th emoves
  M82                            ; set extruder to absolute
  TURN_OFF_HEATERS
  ACTIVATE_EXTRUDER EXTRUDER={start_extruder}
  M117 Unloading done

[gcode_macro CHANGE_NOZZLE]
gcode:
  M117 Nozzle change
  M104 S240
  G90 ; Absolute pos
  G1 X175 Y0 Z100 F1800 ; Move to front
  M109 S240 ;Heat up the filament
  M83                            ; set extruder to relative
  G1 E5 F250                   ; extrude 5 mm
  G1 E-50 F1000                ; retract 5 cm
  M82                            ; set extruder to absolute
  M117 Ready to swap


# [gcode_macro M109]
# rename_existing: M109.9999
# description: [T<index>] [S<temperature>] [D<Deadband>]
#   Set tool temperature and wait.
#   T= Tool number [optional]. If this parameter is not provided, the current tool is used.
#   S= Target temperature
#   D= Dead-band, allows the temperature variance +/- the deadband
# variable_default_deadband: 20.0
# gcode:
#     {% set s = params.S|float %}
#     {% set deadband = default_deadband|float %}
#     {% if params.D is defined %}
#         {% set deadband = params.D|float %}
#     {% endif %}
#     {% set tn = params.T|default(printer.tool_probe_endstop.active_tool_number)|int %}
#     {% set tool = printer.toolchanger.tool_names[tn]|default('') %}
#     {% set extruder = printer[tool].extruder %}

#     SET_HEATER_TEMPERATURE HEATER={extruder} TARGET={s}
#     {% if s > 0 %}
#         TEMPERATURE_WAIT SENSOR={extruder} MINIMUM={s-(deadband/2)} MAXIMUM={s+(deadband/2)}   ; Wait for hotend temp (within D degrees)
#     {% endif %}